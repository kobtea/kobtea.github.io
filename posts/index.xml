<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kobtea.net</title>
    <link>http://kobtea.net/posts/index.xml</link>
    <description>Recent content in Posts on kobtea.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>2015 kobtea</copyright>
    <lastBuildDate>Mon, 04 Dec 2017 21:26:45 +0900</lastBuildDate>
    <atom:link href="http://kobtea.net/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Google SRE本を読んだ</title>
      <link>http://kobtea.net/posts/2017/12/04/google-sre-book/</link>
      <pubDate>Mon, 04 Dec 2017 21:26:45 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2017/12/04/google-sre-book/</guid>
      <description>

&lt;p&gt;やっとこさ読み終わったので、読む前に感じていた疑問を含めつつ感想などを書いておく。&lt;/p&gt;

&lt;h2 id=&#34;sreってなんだろう&#34;&gt;SREってなんだろう&lt;/h2&gt;

&lt;p&gt;ユーザに価値を最速かつ継続的に提供することを目的に添えた、開発もできる運用部隊。&lt;br /&gt;
価値を素早く提供するためには、インフラなどプロダクトチーム以外のリソースが制約事項になってはいけない。ということで人的リソースの制約を乗り越え、SREの価値をスケーラブルにするため自動化・自律化・マイクロサービス化などを積極的に行う。ナレッジに関してもスケールするよう明文化・定量化を徹底し、エンジニアが暗黙的・良心で行っていることを明らかにして組織的に取り組む。&lt;/p&gt;

&lt;h3 id=&#34;インフラエンジニア-チームと何が違うのか&#34;&gt;インフラエンジニア・チームと何が違うのか&lt;/h3&gt;

&lt;p&gt;企業文化や規模によって、インフラエンジニアの業務範囲は大きく異なるので一概には説明できない。既にインフラチームがSREとして機能している会社もあれば、ハードウェアの保守だけしている会社だってある。立ち上げ間もないベンチャーはミドルウェアから下のレイヤはすべて見ていることもあるし、そんな場合は大体SRE的な働き方をしているかもしれない。ただしそんなベンチャーの場合、スピード最優先なのでドキュメント化されていない暗黙知が満載だったり、がっつり属人化していたりするので人的リソースはスケールしていない。&lt;/p&gt;

&lt;p&gt;仮にインフラチームを「ミドルウェアから下のレイヤを、全サービス横断して見る人達」として、SREは何が違うか考えてみる。&lt;br /&gt;
プレイヤーなエンジニアは、開発する時間を捻出することに意識が向いている。運用と並行して開発を行うので、とにかく時間が足りない。小さな自働化から始め、減らせた運用コストを次の開発に当て更に自働化を拡大する。その先はベストプラクティスを実践するためのフレームワークだったりマイクロサービスだったりもする。&lt;br /&gt;
マネージャは、人的リソースをスケールできるように組織をデザインし、チーム外との協力関係を獲得する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人的リソースのスケール&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメンテーションによるナレッジ共有&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;障害対応訓練などに使えるシミュレーション環境&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SREエンジニアの開発時間の確保&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;割り込みを受けない時間の提供&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プロダクトチームとの対等な関係の構築&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;定量的な指標を基にした利害の統一&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;エラーバジェットを利用した攻める機会の獲得&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この辺りを意識する必要がある。マネジメントを考えると結構インフラチームとSREは違うなぁ。&lt;/p&gt;

&lt;p&gt;では、SREはインフラエンジニアの上位互換かというとそうでもない気がする。雑に言えばSREはものすごい知識量のジェネラリストなので、特定分野のスペシャリストではない。ミドルウェアやネットワーク、ハードウェア、セキュリティなどなどスペシャリストがいるインフラって素敵じゃん。なので「SREの活躍でインフラエンジニア不要にするぞい！」というのは個人的には違うんじゃないかなと思う。&lt;/p&gt;

&lt;h3 id=&#34;devopsと何が違うのか&#34;&gt;DevOpsと何が違うのか&lt;/h3&gt;

&lt;p&gt;手段が同じということはあるけど目的が違う。DevOpsも定義がふわっとしているが、運用を楽にするというのが目的。SREはユーザにサービスを早く・継続的に提供するというのが目的。どちらも自動化はやるが、人的リソースのスケールやキャパシティプランニングはDevOpsでは扱わないんじゃないかな。&lt;/p&gt;

&lt;h2 id=&#34;印象的だったこと&#34;&gt;印象的だったこと&lt;/h2&gt;

&lt;h3 id=&#34;絶対に落とさない-からの脱却&#34;&gt;「絶対に落とさない」からの脱却&lt;/h3&gt;

&lt;p&gt;サービスに関わる人間は絶対にサービスを落とさないという気持ちで日々運用している。が、障害は起きるものだし、仮に自社サービスが可用性100%だとしてもユーザへ届く経路上でどうしても可用性は落ちてしまう。&lt;br /&gt;
ならばサービスで必要十分な可用性のレベル・SLOを定義して、貴重な人的リソースを過剰に消費しないようにしましょうという戦略がとられる。SLOは高ければ高いほど好ましいが、それだけコストがかかる。90%を99%にするコストに比べ、99.9%を99.99%にするコストはとても高い。&lt;/p&gt;

&lt;p&gt;ここまでは一般的な話だが、SREでは可用性を過剰に達成しすぎてもダメだという考え方をしている。可用性を必要十分に抑えることで2つの利点が生まれる。&lt;/p&gt;

&lt;p&gt;1つ目は過剰に達成している分を、「本来障害が起きるはずだったんだから、リスクのある挑戦をして障害が起きてもいいよね」と、挑戦の機会として扱えること。ミドルウェアのバージョンアップや依存システムの移行など、システムのレガシー化を防ぐことができ、メンテナンスコストの低下にもつながる。&lt;/p&gt;

&lt;p&gt;2つ目は依存しているサービスに対して、依存元のSLOを織り込んだ設計を強制できること。依存先が依存元よりもSLOが低く、一蓮托生と割り切るのであればそれもよし。そうでないなら落ちることを織り込んだリトライ処理や、重要度の低いデータを破棄・遅延させるなど対策が必要になる。依存元は過剰な信頼をされることもなく、依存先の可用性も上がり、サービスも組織も健全になる。&lt;/p&gt;

&lt;h3 id=&#34;アラートレベルを使い分ける&#34;&gt;アラートレベルを使い分ける&lt;/h3&gt;

&lt;p&gt;モニタリングの出力は以下3種ある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ページ: 即時対応が必要&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;チケット: 数日以内に対応が必要&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ロギング: 対応不要だが記録だけ残す&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ページは日中深夜問わず鳴ったら最後、全ての作業を投げ捨て最優先で対応しなければならない。それだけに心身共に削られるページはむやみやたらに飛ばさない。&lt;br /&gt;
大原則としてユーザ影響があるものはページを飛ばし、なければチケットなりログに落とすだけで良い。ユーザ影響を知るためにホワイトボックスモニタリングだけでなく、ブラックボックスでのモニタリングが重要になる。&lt;/p&gt;

&lt;p&gt;サーバが落ちたらページを飛ばすのは一般的だが、冗長化されていてそこにリクエストが振られないのであればページを鳴らす必要はない。ウェブサーバのディスクが逼迫していても、ロードバランサから抜いてしまえば問題ない。&lt;/p&gt;

&lt;p&gt;障害が起きたら再発防止を行って、着実にページを減らしていく。ホワイトボックスモニタリングで検知されるものは、システムを自動化・自律化させ排除していく。ただし、簡単なブラックボックスモニタリングではリクエスト先の引きの問題もあるので、各種ヘルスチェック機構も充実させる必要がある。もちろん観測できていないのは問題外。&lt;/p&gt;

&lt;h3 id=&#34;sreとgcp&#34;&gt;SREとGCP&lt;/h3&gt;

&lt;p&gt;GoogleはSREの価値を全力でスケールさせる。&lt;br /&gt;
SREの価値をスケールさせる上で、SREエンジニアの人数に制限されてはいけない。最大公約数やベストプラクティスを見つけ出しドキュメント化する。そして実装可能なものに解釈し、ライブラリやフレームワーク、(マイクロ)サービスとして実装・提供する。それらを利用するだけでSREの価値を享受できる。そしてこれをさらにスケールさせて社外に飛び出したのがGCPになる。言ってしまえばGCPはSRE as a Serviceみたいな感じじゃなかろうか。&lt;/p&gt;

&lt;p&gt;Googleで実際に使っているという点でGCPとAWSは思想が異なる。AWSも確かにAmazonで使われているが、全てのサービスを使っているかは怪しい気がする。ユーザリクエストを募集して、投票数の高いものをサービス化したりもしているわけだし。自社で利用しているものとユーザが求めたものが混在しているのがAWS。自社で利用しているものだけが存在しているのがGCP。という印象、実際は違うかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;sreを実践するとしたら考えること&#34;&gt;SREを実践するとしたら考えること&lt;/h2&gt;

&lt;h3 id=&#34;sreを理解するためのシミュレーション&#34;&gt;SREを理解するためのシミュレーション&lt;/h3&gt;

&lt;p&gt;本に書かれたことを始めから全てやるのは無理なので、優先度を付けて取り組んでいくことになる。&lt;br /&gt;
仮に次のような状況を設定して、どうやって取り組んでいくか考えてみると具体的なアクションが見えてくるんじゃなかろうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;四半期毎に1サービスがローンチされる&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;台数規模は100台をベースとする&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;イベント・季節要因により負荷は随時変化する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;サービスクローズは考えないものとする&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;開始時点でSREエンジニアは1人&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;開始時点のSREエンジニアの能力は全能とする(すごい)&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;パワーワード感あるが、OSSや既存の社内ツールに関する調査のオーバーヘッドを無視する、という意味&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サービスのビジネスロジックは無知とする&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;年に1人のペースでSREエンジニアが追加される&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;追加されるSREエンジニアは初期メンバのように全能ではない(ふつう)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;小さく始めるsre&#34;&gt;小さく始めるSRE&lt;/h3&gt;

&lt;p&gt;SREを始めるにあたってぶつかる最初の難題は、SLOとかエラーバジェットの定義が難しい点じゃなかろうか。全くSREに馴染みのない状態から、お試しでやってみるのであれば、ページ件数と対応時間を指標に使ってみるのも良いと思う。重要なのはSREとプロダクトチームで利害を一致させ、その利益をユーザが受ける構造にすること。自分たちのサービスレベルを知るために起きた障害の振り返りを定例化して確認していく。取り組み方や思想の共有ができてきてから、SLOやエラーバジェットは調整していけばいいんじゃないかな。&lt;/p&gt;

&lt;p&gt;そもそもいきなりプロダクトチームを巻き込むのすら気が引ける、もっと小さく始めたいという場合、上記のページ件数を指標にしてインフラチーム内で実施してみるのも意味はあると思う。ミドルウェアなレイヤのページ削減や自動化・自律化はある程度インフラ内だけでも実施できる。ただし、独りよがりなエラーバジェットを掲げて「あいつらいつも障害起こしてんな」と見られる危険もあるので、やはりプロダクトチームと一緒にやったほうが良いのは変わらない。&lt;/p&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;h3 id=&#34;sreを設立します-ってなんか流行に乗っているみたいで恥ずかしくない&#34;&gt;「SREを設立します!」ってなんか流行に乗っているみたいで恥ずかしくない?&lt;/h3&gt;

&lt;p&gt;個人的にバズワードに乗っかっているミーハー感は感じつつも、個人で取り組むものではないので、組織としてアピールするのは間違ってはいないと思う。組織的にちゃんと取り組む、インフラエンジニアの良心に過剰に依存しないという宣言でもあるはず。少なくとも分析チームが既にあるのに「ビッグデータチームを設立します!!」よりはよっぽど意味がある。&lt;/p&gt;

&lt;h3 id=&#34;インフラエンジニアの生存戦略として&#34;&gt;インフラエンジニアの生存戦略として&lt;/h3&gt;

&lt;p&gt;インフラエンジニアであり、ソフトウェアエンジニアでありたいと願う人が健全に働くには、を組織的にデザインしたのがSREという印象。なのでそんな人にはとても魅力的な経験・環境なんじゃなかろうか。日中定常業務をして、人が減った夜に開発をするという黒い環境ではなく、日中に腰を据えて開発できる環境を一緒に捻出していきましょうとアプローチしてくれるのだから嬉しいったらないね!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Stackdriverを眺める</title>
      <link>http://kobtea.net/posts/2016/06/04/try-google-stackdriver/</link>
      <pubDate>Sat, 04 Jun 2016 21:59:34 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2016/06/04/try-google-stackdriver/</guid>
      <description>

&lt;p&gt;以前話題になった&lt;a href=&#34;https://cloud.google.com/stackdriver/&#34;&gt;Stackdriver&lt;/a&gt;をbetaのうちに触っておこうそうしよう。&lt;br /&gt;
AWSがCloudWatchなら、GCPはStackdriverや！！&lt;/p&gt;

&lt;h2 id=&#34;stackdriverの提供する機能&#34;&gt;Stackdriverの提供する機能&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/stackdriver/docs/&#34;&gt;Document&lt;/a&gt;を眺めてみると機能はこんな感じ。&lt;br /&gt;
正直下3つはまだ触れていないのでわりと適当。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitoring&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;監視と計測のためのサービス&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Agentをリソースに仕込んでメトリックを取得する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Agentを使わなくても、GCP APIを使って簡単なメトリックは取得してくれる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;みんな大好きアラート発砲もできる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;GCPだけでなく、AWSにも対応している&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Logging&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;syslogや任意のログを収集して管理・分析ができる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Error Reporting&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;どのエラーがいつ何回起きたか&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Debug&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;コードに埋め込むあのデバッガ&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trace&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;パフォーマンスチューニングのためのサービス&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;どの処理にどれだけ時間がかかっているのかが計測できる&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はMonitoringを眺めてみようかな。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;監視対象のInstanceを立ち上げて、Agentを仕込むぞー。&lt;br /&gt;
今回はOpengrokサーバを構築してみようかな。&lt;br /&gt;
前段にNginx、バックエンドにTomcatがいる構成。&lt;br /&gt;
Stackdriverに関係ない部分はざっくり省略していく(それでも長ったらしくなってしまったあばば)。&lt;/p&gt;

&lt;h3 id=&#34;gce-instanceを作成する&#34;&gt;GCE Instanceを作成する&lt;/h3&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/monitoring/agent/install-agent#authorizing&#34;&gt;Installing the Monitoring Agent - Authorizing the monitoring agent&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/monitoring/api/authentication&#34;&gt;Authorizing the Monitoring API&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;はじめにWeb consoleからGoogle Monitoring APIを有効にしておくこと。&lt;br /&gt;
あとは普通に作成すればいいんだけど、Service Accountの権限だけ注意する。&lt;br /&gt;
最低限&lt;code&gt;monitoring.write&lt;/code&gt;があれば良さそう。&lt;br /&gt;
Service Accountの確認方法は&lt;a href=&#34;https://cloud.google.com/monitoring/agent/install-agent#authorizing&#34;&gt;Document&lt;/a&gt;にある通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl --silent -f -H &amp;quot;Metadata-Flavor: Google&amp;quot; http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/scopes
https://www.googleapis.com/auth/cloud.useraccounts.readonly
https://www.googleapis.com/auth/devstorage.read_only
https://www.googleapis.com/auth/logging.write
https://www.googleapis.com/auth/monitoring
https://www.googleapis.com/auth/service.management
https://www.googleapis.com/auth/servicecontrol
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stackdriver-agentを入れる&#34;&gt;Stackdriver Agentを入れる&lt;/h3&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/monitoring/agent/install-agent&#34;&gt;Installing the Monitoring Agent&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/monitoring/api/authentication#cloud_monitoring_scopes&#34;&gt;Authorizing the Monitoring API&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Documentに記載のinstall scriptを打つだけ、だと思ってました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kobtea@opengrok:~$ curl -O https://repo.stackdriver.com/stack-install.sh
kobtea@opengrok:~$ sudo bash stack-install.sh --write-gcm
Installing agents for Debian or Ubuntu.
# ...
Setting up stackdriver-agent (5.5.0-269.trusty) ...
 * Starting Stackdriver metrics collection agent stackdriver-agent
 * Need to set STACKDRIVER_API_KEY in /etc/default/stackdriver-agent
 * not starting, configuration error
                                                                                                                                                                                          [fail]
# ...
Setting up stackdriver-extractor (92-1.trusty) ...
 * Starting Stackdriver metadata extractor stackdriver-extractor
 * Please set STACKDRIVER_API_KEY in /etc/default/stackdriver-agent
                                                                                                                                                                                          [fail]
# ...
Restarting services
 * Restarting Stackdriver metrics collection agent stackdriver-agent
 * Need to set STACKDRIVER_API_KEY in /etc/default/stackdriver-agent
 * not starting, configuration error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール失敗してる&amp;hellip;&lt;br /&gt;
&lt;code&gt;STACKDRIVER_API_KEY&lt;/code&gt;がないぞって、Documentでは特に言及されてないんだけどなぁ&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stack-install.sh&lt;/code&gt;を見てみると&lt;code&gt;--write-gcm&lt;/code&gt;オプションなんてものは書かれていない。な、なんだってー&lt;br /&gt;
代わりにproject metadataを使う方法は書いてある&amp;hellip;どういうことや&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install and start the Google monitoring agent.
#
# Usage:
#
#   curl -O https://.../stack-install.sh
#   bash stack-install.sh [--api-key=...]
#
# The API key can be omitted on a GCE instance if it is available in the
# project metadata as the value of &amp;quot;stackdriver-agent-key&amp;quot;.
#
# This script does the following:
#
#   1. Configure the required apt-get or yum repository.
#   2. Install the agent package.
#   3. Invoke /opt/stackdriver/stack-config to do the following:
#      a. Optionally configure the agent with the API key.
#      b. Start the agent services.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よくわからんので、API Keyをセットして試す。&lt;br /&gt;
API Keyは以下のurlから確認できる。&lt;br /&gt;
&lt;a href=&#34;https://app.google.stackdriver.com/settings/accounts/agent/&#34;&gt;https://app.google.stackdriver.com/settings/accounts/agent/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kobtea@opengrok:~$ sudo bash stack-install.sh --api-key=&amp;lt;MY_API_KEY&amp;gt;
Installing agents for Debian or Ubuntu.
# ...
Restarting services
 * Restarting Stackdriver metrics collection agent stackdriver-agent

# 入った！
# stackdriver-agentはinstall時に立ち上がる
kobtea@opengrok:~$ sudo service stackdriver-agent status
 * stackdriver-agent is running

# stackdriver-extractorは手動で
kobtea@opengrok:~$ sudo service stackdriver-extractor start
 * Starting Stackdriver metadata extractor stackdriver-extractor                                                                                                                          [ OK ]

# stack-configでも問題なさそう
kobtea@opengrok:~$ /opt/stackdriver/stack-config info
Stackdriver Host Info Dump
Resource Id: xxxx
API Key: xxxx
Error talking to Stackdriver gateway No JSON object could be decoded
 * stackdriver-agent is running
Agent status:  Agent config snippets:
 * stackdriver-extractor is running
Extractor status:  Extractor sample data:
{
  &amp;quot;interfaces&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;lo&amp;quot;,
      &amp;quot;address_families&amp;quot;: [
# ...
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(∩´∀｀)∩ﾜｰｲ&lt;/p&gt;

&lt;h3 id=&#34;stackdriver-agent-pluginを入れる&#34;&gt;Stackdriver Agent pluginを入れる&lt;/h3&gt;

&lt;p&gt;参考: &lt;a href=&#34;https://cloud.google.com/monitoring/agent/plugins/#supported_plugins&#34;&gt;Monitoring Agent Configuration - Supported plugins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agent pluginは標準で色々なミドルウェアに対応している。&lt;br /&gt;
標準pluginはconfigを書くだけで楽ちん。&lt;/p&gt;

&lt;h4 id=&#34;nginx-pluginを入れる&#34;&gt;Nginx pluginを入れる&lt;/h4&gt;

&lt;p&gt;参考: &lt;a href=&#34;https://cloud.google.com/monitoring/agent/plugins/nginx&#34;&gt;Nginx Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nginx pluginは&lt;code&gt;stub_status&lt;/code&gt;の値を計測する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# stub_statusの準備
kobtea@opengrok:~$ sudo touch /etc/nginx/sites-available/status
kobtea@opengrok:~$ cat /etc/nginx/sites-available/status
server {
	listen 80;
	server_name local-stackdriver-agent.stackdriver.com;
	location /nginx_status {
		stub_status on;
		access_log   off;
		allow 127.0.0.1;
		deny all;
	}
	location / {
		root /dev/null;
	}
}
kobtea@opengrok:~$ sudo ln -s /etc/nginx/sites-available/status /etc/nginx/sites-enabled/
kobtea@opengrok:~$ sudo service nginx reload
kobtea@opengrok:~$ curl http://local-stackdriver-agent.stackdriver.com/nginx_status
Active connections: 2
server accepts handled requests
 315 315 3601
Reading: 0 Writing: 1 Waiting: 1

# Stackdriver Nginx pluginの設定
kobtea@opengrok:~$ sudo touch /opt/stackdriver/collectd/etc/collectd.d/nginx.conf
kobtea@opengrok:~$ cat /opt/stackdriver/collectd/etc/collectd.d/nginx.conf
LoadPlugin &amp;quot;nginx&amp;quot;
&amp;lt;Plugin &amp;quot;nginx&amp;quot;&amp;gt;
  URL &amp;quot;http://local-stackdriver-agent.stackdriver.com/nginx_status&amp;quot;
&amp;lt;/Plugin&amp;gt;
kobtea@opengrok:~$ sudo service stackdriver-agent restart
# ...
Created new plugin context.
                                                                                                                                                                                          [ OK ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tomcat-pluginを入れる&#34;&gt;Tomcat pluginを入れる&lt;/h4&gt;

&lt;p&gt;参考: &lt;a href=&#34;https://cloud.google.com/monitoring/agent/plugins/tomcat&#34;&gt;Tomcat Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tomcat, JVM系はJMXを使って計測する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# JMXの設定
kobtea@opengrok:~$ diff -u /etc/default/tomcat7{.orig,}
--- /etc/default/tomcat7.orig	2016-05-12 16:50:51.872516414 +0000
+++ /etc/default/tomcat7	2016-05-12 17:02:53.180519725 +0000
@@ -19,6 +19,7 @@
 # exactly one CPU chip that contains one or two cores, you should also add
 # the &amp;quot;-XX:+CMSIncrementalMode&amp;quot; option.
 JAVA_OPTS=&amp;quot;-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC&amp;quot;
+JAVA_OPTS=&amp;quot;${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom&amp;quot;

 # To enable remote debugging uncomment the following line.
 # You will then be able to use a java debugger on port 8000.
@@ -45,3 +46,7 @@
 # NOTE: authbind works only with IPv4.  Do not enable it when using IPv6.
 # (yes/no, default: no)
 #AUTHBIND=no
+CATALINA_OPTS=&amp;quot;${CATALINA_OPTS} -Dcom.sun.management.jmxremote&amp;quot;
+CATALINA_OPTS=&amp;quot;${CATALINA_OPTS} -Dcom.sun.management.jmxremote.port=9012&amp;quot;
+CATALINA_OPTS=&amp;quot;${CATALINA_OPTS} -Dcom.sun.management.jmxremote.ssl=false&amp;quot;
+CATALINA_OPTS=&amp;quot;${CATALINA_OPTS} -Dcom.sun.management.jmxremote.authenticate=false&amp;quot;

kobtea@opengrok:~$ sudo service tomcat7 restart

# Stackdriver Tomcat pluginの設定
kobtea@opengrok:~$ cd /opt/stackdriver/collectd/etc/collectd.d/ &amp;amp;&amp;amp; sudo curl -O https://raw.githubusercontent.com/Stackdriver/stackdriver-agent-service-configs/master/etc/collectd.d/tomcat-7.conf
kobtea@opengrok:~$ sudo service stackdriver-agent restart
# ...
Created new plugin context.
                                                                                                                                                                                          [ OK ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;web-consoleを眺める&#34;&gt;Web consoleを眺める&lt;/h2&gt;

&lt;p&gt;IndexページはAlert周りの機能が多い印象、すぐに反応したいしね。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/01.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;p&gt;メニューごとにふわっと眺めようかな。&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;GCP/AWSのサービスや、Agent pluginごとにいい感じにグルーピングされている。&lt;br /&gt;
インスタンス単位ではなくリソースタイプ単位でまとめて管理する設計なんだな。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/02.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;p&gt;各リソースページ。&lt;br /&gt;
リソースグループに紐付いたIncidentやメトリックが確認できる。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/03.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;h3 id=&#34;alerting&#34;&gt;Alerting&lt;/h3&gt;

&lt;p&gt;みんな大好きアラート。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/04.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;p&gt;メトリックの閾値などなど結構柔軟に設定できる。&lt;br /&gt;
通知先はEmail, Pagerduty, Webhook, Slackなど。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/05.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;p&gt;IncidentsではPagerduty likeに状態管理ができる。&lt;br /&gt;
コメントも書けたりする。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/06.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;p&gt;Uptime Checksは複数拠点からチェックしてくれる。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/07.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;p&gt;Events、「最近調子悪いけど何かしたっけかなー」とか「最近Alert減ってきていい傾向だなー」とか。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/08.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;h3 id=&#34;groups&#34;&gt;Groups&lt;/h3&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/09.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;p&gt;先の勝手に分類してくれるResourcesではなく、自分でグルーピングしたい！ときに使う。&lt;br /&gt;
項目はResourcesと同じ。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/10.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;h3 id=&#34;dashboards&#34;&gt;Dashboards&lt;/h3&gt;

&lt;p&gt;君だけの最強のDashboardを作ろう。&lt;br /&gt;
しかし残念、折れ線グラフしか使えない！&lt;br /&gt;
CPUとか積み上げグラフにしたいな&amp;hellip;&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/11.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;h3 id=&#34;logs&#34;&gt;Logs&lt;/h3&gt;

&lt;p&gt;ログの全文検索、リソースタイプ別、ログレベル別なんでもござれ。しゅごい。&lt;br /&gt;
データフォーマットはjson。&lt;/p&gt;




&lt;img src=&#34;http://kobtea.net/img/2016/06/04/12.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;



&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;まだまだbetaだなーと強く思ったのはグラフかな。折れ線グラフ以外も欲しい。&lt;br /&gt;
Custom Dashboardはgrafanaレベルになったら嬉しいな。&lt;br /&gt;
複数メトリック組み合わせて四則演算できるとかなり嬉しいけど、これはagent pluginで頑張れと言われても仕方ないかなぁ。&lt;/p&gt;

&lt;p&gt;UIは好みの問題かもしれないけど、Resourcesのグラフは縦に並べただけでとにかく見づらい。&lt;/p&gt;

&lt;p&gt;グラフ以外のAlert, Log周りはとても使いやすい印象。&lt;br /&gt;
個人サービス程度なら今の状態でも十分お世話になれると思う。&lt;/p&gt;

&lt;p&gt;たのしかったです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenGrokのデザインを変更する</title>
      <link>http://kobtea.net/posts/2016/05/14/customize-skin-for-opengrok/</link>
      <pubDate>Sat, 14 May 2016 04:21:57 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2016/05/14/customize-skin-for-opengrok/</guid>
      <description>

&lt;p&gt;以前&lt;a href=&#34;http://kobtea.net/posts/2016/05/03/setup-opengrok/&#34;&gt;Ubuntu trustyにOpenGrokをインストールする&lt;/a&gt;で、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;サイトのデザインを変えたい場合はどうすればいいんだろう…folkして魔改造するのかな…それはつらそうだな…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書いたけど、方法がわかったのでメモ。&lt;br /&gt;
標準でいくつかのデザインテーマが提供されていた。&lt;/p&gt;

&lt;h2 id=&#34;web-site-look-feel-option&#34;&gt;Web Site Look &amp;amp; Feel Option&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;OpenGrok&lt;/code&gt; wrapper scriptを眺めていたら&lt;code&gt;SKIN&lt;/code&gt;なんて環境変数を見つけた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/blob/0.12.1.5/OpenGrok#L278-L281&#34;&gt;https://github.com/OpenGrok/OpenGrok/blob/0.12.1.5/OpenGrok#L278-L281&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;標準で&lt;code&gt;default&lt;/code&gt;, &lt;code&gt;offwhite&lt;/code&gt;, &lt;code&gt;polished&lt;/code&gt;の3種類のスキンが提供されている。&lt;br /&gt;
「ちょっとだけ気分を変えたいな」程度であれば、このスキンを使えば幸せになれそう。&lt;/p&gt;

&lt;h2 id=&#34;スキン&#34;&gt;スキン&lt;/h2&gt;

&lt;p&gt;どれもJavaを感じるデザイン。&lt;/p&gt;

&lt;h3 id=&#34;default&#34;&gt;default&lt;/h3&gt;

&lt;p&gt;


&lt;img src=&#34;http://kobtea.net/img/2016/05/14/default01.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;br /&gt;



&lt;img src=&#34;http://kobtea.net/img/2016/05/14/default02.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;/p&gt;

&lt;h3 id=&#34;offwhite&#34;&gt;offwhite&lt;/h3&gt;

&lt;p&gt;


&lt;img src=&#34;http://kobtea.net/img/2016/05/14/offwhite01.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;br /&gt;



&lt;img src=&#34;http://kobtea.net/img/2016/05/14/offwhite02.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;/p&gt;

&lt;h3 id=&#34;polished&#34;&gt;polished&lt;/h3&gt;

&lt;p&gt;


&lt;img src=&#34;http://kobtea.net/img/2016/05/14/polished01.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;br /&gt;



&lt;img src=&#34;http://kobtea.net/img/2016/05/14/polished02.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;/p&gt;

&lt;h2 id=&#34;変更方法&#34;&gt;変更方法&lt;/h2&gt;

&lt;p&gt;スキンを変更するには、&lt;code&gt;update&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;する際に&lt;code&gt;SKIN&lt;/code&gt;を指定しておけばいいだけ。&lt;/p&gt;

&lt;p&gt;tomcatに既にdeployしている場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo SKIN=&#39;-L offwhite&#39; ./opengrok-0.12.1.5/bin/OpenGrok update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tomcatにこれからdeployする場合、&lt;code&gt;deploy&lt;/code&gt;ではスキン設定されないので&lt;code&gt;update&lt;/code&gt;もすること。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo ./opengrok-0.12.1.5/bin/OpenGrok deploy
$ sudo SKIN=&#39;-L offwhite&#39; ./opengrok-0.12.1.5/bin/OpenGrok update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトを追加してindexを張るときにも&lt;code&gt;SKIN&lt;/code&gt;の指定は必要。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo SKIN=&#39;-L offwhite&#39; ./opengrok-0.12.1.5/bin/OpenGrok index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;毎回環境変数指定するの面倒くさいので、&lt;code&gt;OpenGrok&lt;/code&gt; wrapper scriptを直にいじっちゃってもいいかも。&lt;br /&gt;
あるいは環境変数書き込んだrcファイル作って、&lt;code&gt;source&lt;/code&gt;するとか。&lt;/p&gt;

&lt;p&gt;スキンを変えても反映されない場合は、ブラウザキャッシュを消すこと。&lt;/p&gt;

&lt;h2 id=&#34;フルカスタマイズする場合&#34;&gt;フルカスタマイズする場合&lt;/h2&gt;

&lt;p&gt;標準のスキンを参考に自作すればいいんじゃないかな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/tree/0.12.1.5/web/default&#34;&gt;default&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/tree/0.12.1.5/web/offwhite&#34;&gt;offwhite&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/tree/0.12.1.5/web/polished&#34;&gt;polished&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自作スキンを作って&lt;code&gt;.war&lt;/code&gt;に追加した後、&lt;code&gt;SKIN&lt;/code&gt;で指定すればいいだけなはず(実際作ってないけど&amp;hellip;)。&lt;br /&gt;
Java力低いので&lt;code&gt;jar&lt;/code&gt;コマンドを使ってファイルを抽出・追加する方法についてメモメモ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 任意のディレクトリ・ファイルを抽出する
$ jar xf source.war offwhite
$ ls -l offwhite/
total 44
drwxrwxr-x 2 vagrant vagrant  4096 Apr 29  2014 img
-rw-rw-r-- 1 vagrant vagrant   803 Apr 29  2014 jquery.autocomplete.css
-rw-rw-r-- 1 vagrant vagrant  1135 Apr 29  2014 jquery.combo.css
-rw-rw-r-- 1 vagrant vagrant   192 Apr 29  2014 jquery.tooltip.css
-rw-rw-r-- 1 vagrant vagrant  9534 Apr 29  2014 print.css
-rw-rw-r-- 1 vagrant vagrant 13976 Mar 24  2015 style.css

# 試しにファイルを仕込んでwar更新してみる
$ touch offwhite/hogehoge
$ jar uf source.war offwhite

# お掃除した後に、warを展開する
$ rm -rf offwhite
$ jar xf source.war

# ちゃんと追加されているんだなも
$ ls offwhite/hogehoge
offwhite/hogehoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分でスキンを作った場合にはこの要領で。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jar uf opengrok-0.12.1.5/lib/source.war myskin
$ sudo SKIN=&#39;-L myskin&#39; ./opengrok-0.12.1.5/bin/OpenGrok update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/blob/0.12.1.5/README.txt#L357-L404&#34;&gt;README&lt;/a&gt;には、&lt;code&gt;jar&lt;/code&gt;ではなく&lt;code&gt;unzip&lt;/code&gt;を使った方法が紹介されている。&lt;br /&gt;
お好きな方で。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu trustyにOpenGrokをインストールする</title>
      <link>http://kobtea.net/posts/2016/05/03/setup-opengrok/</link>
      <pubDate>Tue, 03 May 2016 03:16:25 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2016/05/03/setup-opengrok/</guid>
      <description>

&lt;p&gt;tomcat力低いけどOpenGrok使ってみたいんや！&lt;br /&gt;
お試しにvagrantで立ててみる。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/wiki/How-to-install-OpenGrok&#34;&gt;How to install OpenGrok&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/wiki/Supported-Languages-and-Formats&#34;&gt;Supported Languages and Formats&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04.4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;OpenJDK 1.7.0_95&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;OpenGrok 0.12.1.5&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;必要なpackageをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y
~$ sudo apt-get install openjdk-7-jdk tomcat7 exuberant-ctags git subversion mercurial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OpenGrokのarchiveを落としてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ wget -O - https://java.net/projects/opengrok/downloads/download/opengrok-0.12.1.5.tar.gz | tar xvzf -
~$ ./opengrok-0.12.1.5/bin/OpenGrok --help
Loading the default instance configuration ...

Usage: OpenGrok &amp;lt;deploy|derby|update|updateQuietly|usage|help&amp;gt;
       OpenGrok index [&amp;lt;directory&amp;gt;]
       OpenGrok indexpart &amp;lt;src_root&amp;gt; &amp;lt;directory1&amp;gt; [..]
       OpenGrok clearHistory [&amp;lt;repository_name&amp;gt;]

  Optional environment variables:
    OPENGROK_CONFIGURATION - location of your configuration
      e.g. $ OPENGROK_CONFIGURATION=/var/opengrok/myog.conf ./opengrok-0.12.1.5/bin/OpenGrok ...

    See the code for more information on configuration options / variables
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;See the code for more information on configuration options / variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh&amp;hellip;軟弱者にとても厳しい。&lt;br /&gt;
と思ったけど、&lt;code&gt;bin/OpenGrok&lt;/code&gt;自体はただのshell scriptなので頑張れば大丈夫そう。&lt;/p&gt;

&lt;p&gt;tomcatにデプロイするぞ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ sudo service tomcat7 status
 * Tomcat servlet engine is running with pid 10477
~$ sudo ./opengrok-0.12.1.5/bin/OpenGrok deploy
Loading the default instance configuration ...
Installing /home/vagrant/opengrok-0.12.1.5/bin/../lib/source.war to /var/lib/tomcat7/webapps ...

Start your application server (Tomcat),  if it is not already
running, or wait until it loads the just installed web  application.

OpenGrok should be available on &amp;lt;HOST&amp;gt;:&amp;lt;PORT&amp;gt;/source
  where HOST and PORT are configured in Tomcat.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;HOST&amp;gt;:8080/source/&lt;/code&gt;にアクセスしてOpenGrokが表示されたら喜ぶ。&lt;/p&gt;

&lt;h2 id=&#34;リファレンス用のコードを配置&#34;&gt;リファレンス用のコードを配置&lt;/h2&gt;

&lt;p&gt;リファレンス用のコードとは、リポジトリやプロジェクトと同義。&lt;br /&gt;
OpenGrokではプロジェクトという単語を使っている。&lt;/p&gt;

&lt;p&gt;このときに最低限知っておいたほうがいい環境変数。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OPENGROK_INSTANCE_BASE&lt;/code&gt;:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;default &lt;code&gt;/var/opengrok&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;OpenGrokのベースディレクトリ&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;この配下にetc, log等色々掘られる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SRC_ROOT&lt;/code&gt;:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;default &lt;code&gt;OPENGROK_INSTANCE_BASE/src&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;リファレンス用コードを置くディレクトリ&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DATA_ROOT&lt;/code&gt;:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;default &lt;code&gt;OPENGROK_INSTANCE_BASE/data&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;リファレンス用コードの解析結果が置かれるディレクトリ&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;適当に&lt;a href=&#34;https://github.com/kobtea/akka-goat-mail&#34;&gt;kobtea/akka-goat-mail&lt;/a&gt;とかでいいや&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SRC_ROOTは$HOME/srcにしてみよう
~$ mkdir src
~$ cd src/
~/src$ git clone https://github.com/kobtea/akka-goat-mail.git
~/src$ cd

# indexを張る
# デフォルト以外のSRC_ROOTの場合は絶対パスを与える
~$ sudo ./opengrok-0.12.1.5/bin/OpenGrok index $HOME/src
Loading the default instance configuration ...
WARNING: OpenGrok generated data path /var/opengrok/data doesn&#39;t exist
  Attempting to create generated data directory ...
WARNING: OpenGrok generated etc path /var/opengrok/etc  doesn&#39;t exist
  Attempting to create generated etc directory ...
  Creating default /var/opengrok/logging.properties ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザでプロジェクトが追加されたことを確認する。&lt;/p&gt;

&lt;p&gt;ここでちょっと寄り道。&lt;br /&gt;
indexを張ったあとの&lt;code&gt;OPENGROK_INSTANCE_BASE&lt;/code&gt;を眺めてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~$ tree /var/opengrok/
/var/opengrok/
├── data
│   ├── historycache
│   │   └── akka-goat-mail
│   │       ├── build.sbt.gz
│   │       ├── LICENSE.gz
│   │       ├── OpenGroklatestRev
│   │       ├── project
│   │       │   ├── build.properties.gz
│   │       │   └── plugins.sbt.gz
│   │       ├── README.md.gz
│   │       └── src
│   │           └── main
│   │               └── scala
│   │                   └── GoatMail.scala.gz
│   ├── index
│   │   └── akka-goat-mail
│   │       ├── _1.fdt
│   │       ├── _1.fdx
│   │       ├── _1.fnm
│   │       ├── _1_Lucene41_0.doc
│   │       ├── _1_Lucene41_0.pos
│   │       ├── _1_Lucene41_0.tim
│   │       ├── _1_Lucene41_0.tip
│   │       ├── _1.nvd
│   │       ├── _1.nvm
│   │       ├── _1.si
│   │       ├── segments_3
│   │       └── segments.gen
│   ├── timestamp
│   └── xref
│       └── akka-goat-mail
│           ├── build.sbt.gz
│           ├── LICENSE.gz
│           ├── project
│           │   ├── build.properties.gz
│           │   └── plugins.sbt.gz
│           ├── README.md.gz
│           └── src
│               └── main
│                   └── scala
│                       └── GoatMail.scala.gz
├── etc
│   └── configuration.xml
├── log
│   └── opengrok0.0.log
└── logging.properties

17 directories, 29 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logもここにあるのね。&lt;br /&gt;
loggerを変更する場合は、&lt;code&gt;opengrok-0.12.1.5/doc/logging.properties&lt;/code&gt;を参考にして&lt;code&gt;OPENGROK_LOGGER_CONFIG_PATH&lt;/code&gt;に渡せば良い。&lt;/p&gt;

&lt;p&gt;etcにはコマンドパスなどのマッピング情報が記載されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;void method=&amp;quot;put&amp;quot;&amp;gt;
 &amp;lt;string&amp;gt;org.opensolaris.opengrok.history.GitRepository&amp;lt;/string&amp;gt;
 &amp;lt;string&amp;gt;/usr/bin/git&amp;lt;/string&amp;gt;
&amp;lt;/void&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。&lt;br /&gt;
indexコマンドで生成しているわけだし、これは手でいじらないほうが良さそう。&lt;/p&gt;

&lt;h2 id=&#34;運用&#34;&gt;運用&lt;/h2&gt;

&lt;p&gt;基本的な運用自体は、読みたいソースを見つけて&lt;code&gt;SRC_ROOT&lt;/code&gt;へ逐一追加、indexの貼り直しかな。&lt;br /&gt;
常にupstreamを追い続けたいのであれば、リポジトリ更新、index貼り直しをするcronでも作れば良い。&lt;br /&gt;
サイトのデザインを変えたい場合はどうすればいいんだろう&amp;hellip;folkして魔改造するのかな&amp;hellip;それはつらそうだな&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年の振り返り</title>
      <link>http://kobtea.net/posts/2015/12/31/inventory-of-2015/</link>
      <pubDate>Thu, 31 Dec 2015 22:00:48 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2015/12/31/inventory-of-2015/</guid>
      <description>

&lt;p&gt;こたつでぬくぬく。&lt;br /&gt;
思いつくキーワードを拾いつつ、だらだら思い返す。&lt;/p&gt;

&lt;h2 id=&#34;技術的なこと&#34;&gt;技術的なこと&lt;/h2&gt;

&lt;p&gt;もう少し頑張りましょう&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/31/2015_contribute.jpg&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;ossコントリビュート&#34;&gt;OSSコントリビュート&lt;/h3&gt;

&lt;p&gt;パッチを投げて初コントリビュートした。&lt;br /&gt;
メンテナの方が深夜にもかかわらず素早くレスポンスをくれたり、&amp;rdquo;このコミット1つにまとめてね&amp;rdquo;とか手取り足取り教えてくれた。&lt;br /&gt;
GitHubはカジュアルにパッチが投げられていいなー&lt;/p&gt;

&lt;h3 id=&#34;scala&#34;&gt;Scala&lt;/h3&gt;

&lt;p&gt;ここ1年くらいscalaをたくさん書いていた。&lt;br /&gt;
関数型言語をまともに触ったのはこれが初めてだけど、ずっとオブジェクト指向で関数型初めてです＞＜という僕のような人にはとても良い言語だと思う。&lt;br /&gt;
ただし、学習コストは高い。&lt;br /&gt;
オブジェクト指向と関数型の両側面を持ち合わせているので、どちらに対しても理解を必要とする。&lt;br /&gt;
関数型を知るためにhaskell触ってみようかな&amp;hellip;とかアクター知るためにerlang触ってみようかな&amp;hellip;とか、その辺を楽しめる人にとっては知見を広げてくれる良い言語。&lt;/p&gt;

&lt;p&gt;scalaで&lt;code&gt;map&lt;/code&gt;をたくさん書いたあと、rubyのブロック構文に対する見え方が変わったし、&lt;code&gt;xargs&lt;/code&gt;で脳汁が出るようになった。scalaとの出会いに感謝。&lt;/p&gt;

&lt;h3 id=&#34;isucon5&#34;&gt;ISUCON5&lt;/h3&gt;

&lt;p&gt;予選落ちだけど。&lt;br /&gt;
面白そうだなーﾁﾗﾁﾗと毎年横目で見ていたけど、今年は思い切って参加した。&lt;br /&gt;
チームの温度感としては記念受験程度で、事前準備も各自が好きなことポツポツやる程度だった。&lt;br /&gt;
おやつの時間くらいに一瞬だけ上位に行けたのがとても嬉しかった。&lt;br /&gt;
決勝とか予選とかではなく、「よっしゃ！バリバリにチューニングしたったで！！」という達成感があまり無かったので、来年もリベンジしたいなぁ。&lt;/p&gt;

&lt;h2 id=&#34;私生活なこと&#34;&gt;私生活なこと&lt;/h2&gt;

&lt;h3 id=&#34;お遍路&#34;&gt;お遍路&lt;/h3&gt;

&lt;p&gt;2014年から年に1回ペースで四国へ行ってお遍路参りを始めた。&lt;br /&gt;
1年目は原付きをレンタルしてお寺周りをした。&lt;br /&gt;
が、原付き限定の特別ルールを意識するのが嫌だったので、今年は二輪免許をとって挑んだ。&lt;br /&gt;
おかげさまで徳島23箇所を2年で回りきった。&lt;br /&gt;
田舎道をトコトコ走るのはとても楽しいのでおすすめ。&lt;br /&gt;
来年の高知どうしよ&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;健康管理&#34;&gt;健康管理&lt;/h3&gt;

&lt;p&gt;体重計を買った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B00GRP609C/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00GRP609C&amp;amp;linkCode=as2&amp;amp;tag=culofgrasslan-22&#34;&gt;Withings Smart Body Analyzer ネットワーク対応 体重計 WS-50&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;特別何か運動はしなかったけど、毎日体重計に乗って眺める&amp;rdquo;体重計乗るだけダイエット&amp;rdquo;をやった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/31/weight.jpg&#34; class=&#34;img-responsive&#34; width=&#34;50%&#34; height=&#34;50%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;7月くらいまでは意外にも成果あって、体脂肪が落ちていった。&lt;br /&gt;
その後は仕事で色々あってやさぐれてしまい、たくさん食べたり、そもそも体重計乗らなくなってしまった。見事なV字回復である。来年から体重計乗るだけダイエットを復活させたい。&lt;/p&gt;

&lt;h2 id=&#34;来年がんばりたいこと&#34;&gt;来年がんばりたいこと&lt;/h2&gt;

&lt;p&gt;今年が終わっちゃうので来年考えよう＞＜&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RAID組もうとしたけどrsync(robocopy)で済ませた話</title>
      <link>http://kobtea.net/posts/2015/12/20/rsync-instead-raid/</link>
      <pubDate>Sun, 20 Dec 2015 18:19:02 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2015/12/20/rsync-instead-raid/</guid>
      <description>

&lt;p&gt;ちょびちょびバックアップはとっていたけど、まともな冗長構成の取れたストレージが自宅になかった。&lt;br /&gt;
写真とか自炊本を失う前にいい加減なんとかしようそうしよう。&lt;br /&gt;
紆余曲折あったのでありのままの紆余曲折を書いていく。&lt;/p&gt;

&lt;h2 id=&#34;自宅の環境&#34;&gt;自宅の環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;デスクトップPC (Windows)&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;常時起動していて自宅サーバ状態&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;意識低いことする用&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Macbook Air&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;コード書いたりする&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;意識高いことする用&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;プランをいくつか考えてみる&#34;&gt;プランをいくつか考えてみる&lt;/h2&gt;

&lt;p&gt;RAIDを組めるストレージといえばNASということで、NASを買うかどうかも含め考えられるプランは3つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプライアンスNAS案&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;自作NAS案&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Windows機でがんばる案&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;アプライアンスnas案&#34;&gt;アプライアンスNAS案&lt;/h3&gt;

&lt;p&gt;箱物のNASを買う案。&lt;br /&gt;
買うからにはスロット4本以上ほしい。&lt;/p&gt;

&lt;p&gt;QNAP評判良いけど、結構良いお値段するんだなー。&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B00O3Y7E2G/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00O3Y7E2G&amp;amp;linkCode=as2&amp;amp;tag=culofgrasslan-22&#34;&gt;QNAP TurboNAS デュアルコアCPU 512MBメモリ 4ベイ 2年保証 多機能NAS TS-431&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;お手頃価格ではReadyNASだけどFirmwareが不評。&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B00CHABREE/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00CHABREE&amp;amp;linkCode=as2&amp;amp;tag=culofgrasslan-22&#34;&gt;NETGEAR ReadyNAS 104 4ベイ Diskless 3年保証 ネットワークストレージ 個人/SOHO RN10400-100AJS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプライアンスなので楽&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;メディアサーバとしても使える&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;しっかりしたものを買おうとすると結構高い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Firmwareで駄目パッチが来ると色々辛い&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;自作nas案&#34;&gt;自作NAS案&lt;/h3&gt;

&lt;p&gt;zfs(w/Linux)が気になるので、RAID-Z2で組むことを主軸に考えた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自作するならディスク5本位挿したいな&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;RAID-Z2は現状あとからディスクを増やせないので、始めから多めに挿しておく&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ディスク4本だとRAID10と実効容量変わらずで負けた気がする&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;小さいほうがいいよねってことでMini-ITX&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった要件を満たすケースを探しながらキャッキャウフフしてた。&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linuxなのでお勉強にもなる&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Skylake出たばっかりでかなり時期が悪い感&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;駆け込み需要でHaswell以前のM/Bが品薄状態&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;メモリの規格も変わっちゃったし&amp;hellip;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;windows機でがんばる案&#34;&gt;Windows機でがんばる案&lt;/h3&gt;

&lt;p&gt;今時のWindowsはSoftware RAIDが組めてしまうすごい。&lt;br /&gt;
この案ではお手軽に小さく始めるのが主軸なので、RAID1で最低限の冗長構成でいいかな。&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一番お手頃価格&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows&amp;hellip;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;結局どれにしたの&#34;&gt;結局どれにしたの&lt;/h3&gt;

&lt;p&gt;今回おさいふ事情が芳しくなかったので、WindowsでRAID1を作ることにした。&lt;br /&gt;
とりあえずディスク2本買うだけで良いし、小さく始めるにはちょうどいい感じ。&lt;br /&gt;
時期が来たらNAS機自作するのも楽しそうだな。&lt;/p&gt;

&lt;p&gt;買ってきたもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B013HNYVCE/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B013HNYVCE&amp;amp;linkCode=as2&amp;amp;tag=culofgrasslan-22&#34;&gt;Western Digital Corporation WD60EZRZ-RT&lt;/a&gt; * 2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B007903F7E/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B007903F7E&amp;amp;linkCode=as2&amp;amp;tag=culofgrasslan-22&#34;&gt;エアリア Raid JET PCI Express X1 接続 Raidボード Raid0 1対応 SD-PESA3-2RL&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SATAポート足りなかったので拡張カード買いに行ったら、RAID有りモデルと無しモデルで同じ値段だったので有りなやつを買ってみた。&lt;br /&gt;
ふわっとRAIDカードを買ってきたら、今度はHardware RAIDとSoftware RAIDどっちにしようかという話になった。&lt;/p&gt;

&lt;h2 id=&#34;hardware-raid1-v-s-software-raid1&#34;&gt;Hardware RAID1 v.s. Software RAID1&lt;/h2&gt;

&lt;p&gt;ファイ！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hardware RAIDは、Marvellチップ搭載の上記RAIDカード&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Software RAIDは、Windows標準のミラーボリューム&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CrystalDiskInfoとCrystalDiskMarkで見比べてみる。&lt;/p&gt;

&lt;h3 id=&#34;hdd単品&#34;&gt;HDD単品&lt;/h3&gt;

&lt;p&gt;RAID組まずにHDD(WD60EZRZ-RT)単品だとどうなんじゃろ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/20/bare_info.jpg&#34; class=&#34;img-responsive&#34; width=&#34;50%&#34; height=&#34;50%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/20/bare_mark.jpg&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;これが比較の基準だな。&lt;/p&gt;

&lt;h3 id=&#34;hardware-raid1-marvell-raid-volume&#34;&gt;Hardware RAID1 (Marvell RAID Volume)&lt;/h3&gt;

&lt;p&gt;Amazonのレビューにも書いてあったけど、smart見れない(´・ω・｀)&lt;br /&gt;
下調べせずにふわっと買ってきちゃったから仕方ないね。&lt;br /&gt;
もともとお高いRAIDカードは買うつもりなかったから悔しくないもん。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/20/hard_info.jpg&#34; class=&#34;img-responsive&#34; width=&#34;50%&#34; height=&#34;50%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;やっぱりwriteは落ちちゃう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/20/hard_mark.jpg&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software RAIDに比べればCPU負荷は低いんじゃないかな(測ってないけど^p^)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;smart見れない(´・ω・｀)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;rebuildはBIOS上で行うため、rebuild中はWindowsを使用できない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;RAIDコントローラのベンダロックイン&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;software-raid1-windows-mirrored-volume&#34;&gt;Software RAID1 (Windows Mirrored Volume)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/20/soft_info.jpg&#34; class=&#34;img-responsive&#34; width=&#34;50%&#34; height=&#34;50%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;writeはHardware RAID1と同じくらい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2015/12/20/hard_mark.jpg&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rebuildはWindows上で行うため、rebuild中もWindowsが利用できる&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windowsのベンダロックイン&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;結局どっちにしたの&#34;&gt;結局どっちにしたの&lt;/h3&gt;

&lt;p&gt;どっちにもしてない＞＜&lt;br /&gt;
当初smart見れないのは辛いので、ミラーボリュームを使ったSoftware RAID1にしようと決めた。&lt;br /&gt;
このミラーボリューム、ダイナミックディスクという形式でフォーマットする必要がある。&lt;br /&gt;
そしてこのダイナミックディスクの評判が芳しくない様子。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aikotobaha.blogspot.jp/2011/05/windows7.html&#34;&gt;Windows7 無効になったダイナミックディスクを復旧する&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pc-every.com/TIPS/tips09.html&#34;&gt;ダイナミックディスクがアクセス不能になった場合の修復方法&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;めっちゃ怖い。&lt;/p&gt;

&lt;h2 id=&#34;もう定期バックアップだけでいいんじゃなかろうか&#34;&gt;もう定期バックアップだけでいいんじゃなかろうか&lt;/h2&gt;

&lt;p&gt;なんかもう疲れちゃって、RAID自体微妙な気がしてきた。&lt;br /&gt;
自宅環境ならもう定期バックアップだけ取っていればいいんじゃないかな。&lt;br /&gt;
目的はデータ自体の冗長化(バックアップ)であって、高可用性ではない。&lt;/p&gt;

&lt;p&gt;と考えだしたら&lt;code&gt;rsync&lt;/code&gt;が輝きだした。&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ベンダロックインがない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;復旧がめっちゃ楽&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バッチによる非同期処理のため一時的に差分が生まれる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ディスクは当然2本見えるので、&amp;rdquo;mirror側は絶対に触らない&amp;rdquo;という&amp;rdquo;運用でカバー&amp;rdquo;が発生する&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ええやん！&lt;/p&gt;

&lt;h2 id=&#34;robocopyでそそくさと設定する&#34;&gt;robocopyでそそくさと設定する&lt;/h2&gt;

&lt;p&gt;Windowsには&lt;code&gt;robocopy&lt;/code&gt;という&lt;code&gt;rsync&lt;/code&gt;相当のコマンドが存在する。&lt;/p&gt;

&lt;p&gt;下記のコマンドをタスクスケジューラに登録してdailyで実行させる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;$ robocopy %SRC% %DST% /MIR /R:3 /W:5 /XD &amp;quot;System Volume Information&amp;quot; &amp;quot;$RECYCLE.BIN&amp;quot; /XJ /TEE /LOG:&amp;quot;/PATH/TO/LOG.log&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/MIR&lt;/code&gt; ミラーリング(削除もしてくれる)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/R:n&lt;/code&gt; コピー失敗時のリトライ数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/W:n&lt;/code&gt; コピー失敗時のリトライまでの待ち時間&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/XD &amp;lt;DIR&amp;gt;&lt;/code&gt; 指定ディレクトリを除外&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/XJ&lt;/code&gt; ジャンクションポイント(シンボリックリンクのようなもの)を除外&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/TEE&lt;/code&gt; 標準出力にも出力する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/LOG&lt;/code&gt; ログの出力先&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;勝った！これで大勝利や！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;お金のこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;お金に余裕があるなら&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;QNAPとかアプライアンスNAS買えばいいと思う&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Linuxのお勉強したいなら自作NASアリだと思う&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お金に余裕が無いからといって、Windowsのダイナミックディスクに手を出してはいけない&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;冗長化のこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;欲しいのは本当に高可用性(RAID)なのかよく考える&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;データ自身をバックアップしていれば、可用性は低くても大丈夫なケース&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;サービスをホスティングしていない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一人暮らしなど、利用者=運用者な状況(困るの自分だけだし&amp;hellip;)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;可用性高くしたいケース&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;サービスをホスティングしている&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;家族など自分以外の利用者がいる状況&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[Scala] sbt consoleでCtrl-Dが効かなくなったらthread設定を疑う</title>
      <link>http://kobtea.net/posts/2015/09/15/sbt-console-quit/</link>
      <pubDate>Tue, 15 Sep 2015 22:10:55 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2015/09/15/sbt-console-quit/</guid>
      <description>

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scalaVersion := &amp;quot;2.11.6&amp;quot;

libraryDependencies += &amp;quot;com.typesafe.akka&amp;quot; %% &amp;quot;akka-actor&amp;quot; % &amp;quot;2.3.11&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;悩み&#34;&gt;悩み&lt;/h2&gt;

&lt;p&gt;akkaでthread pool作って遊んでたらsbt consoleをctrl-Dで抜けられなくなった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import scala.concurrent.Future
scala&amp;gt; import akka.actor.ActorSystem

scala&amp;gt; implicit val ec = ActorSystem().dispatcher
ec: scala.concurrent.ExecutionContextExecutor = Dispatcher[akka.actor.default-dispatcher]

scala&amp;gt; Future(1)(ec)
res0: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@9ccb14d

scala&amp;gt; :q // consoleから抜けられない(´；ω；｀)ﾌﾞﾜｯ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;akkaが原因かな？と思い、ExecutorServiceを使ってみたけど同じくconsoleを抜けられない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import scala.concurrent.{Future, ExecutionContext}
scala&amp;gt; import java.util.concurrent.Executors

scala&amp;gt; implicit val ec = ExecutionContext.fromExecutorService(Executors.newFixedThreadPool(1))
ec: scala.concurrent.ExecutionContextExecutorService = scala.concurrent.impl.ExecutionContextImpl$$anon$1@8a0f6d7

scala&amp;gt; Future(1)(ec)
res0: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@64918adb

scala&amp;gt; :q // consoleから抜けられない(´；ω；｀)ﾌﾞﾜｯ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala.concurrent.ExecutionContext.Implicits.global&lt;/code&gt;はそんなことないんだけどなぁ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import scala.concurrent.{Future, ExecutionContext}

scala&amp;gt; implicit val ec = ExecutionContext.Implicits.global
ec: scala.concurrent.ExecutionContextExecutor = scala.concurrent.impl.ExecutionContextImpl@73be4237

scala&amp;gt; Future(1)(ec)
res0: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@42ea62b5

scala&amp;gt; :q

[success] Total time: 77 s, completed 2015/09/15 22:23:06
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;threadをdaemonにすると解決するよ&#34;&gt;threadをdaemonにすると解決するよ&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Javaはデーモンスレッド以外のスレッドが終了したとき、プログラムを終了します。このとき、デーモンが処理をしているかどうかは関係ありません。なので、処理が途中でぶった切られる可能性があります。それがまずい場合はやっぱり自前でシャットダウンする機構を作るしかないのですが。。。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nodamushi.hatenablog.com/entry/20130907/1378554253&#34;&gt;Javaでマルチスレッドするときの注意をまとめてみた&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作成したthreadがdaemonでないから、メインのthreadを止めたあとも動き続けてしまっているらしい。&lt;br /&gt;
threadをdaemonにして再挑戦。&lt;/p&gt;

&lt;p&gt;akka版&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import scala.concurrent.Future
scala&amp;gt; import com.typesafe.config.ConfigFactory
scala&amp;gt; import akka.actor.ActorSystem

scala&amp;gt; val config = ConfigFactory.parseString(&amp;quot;akka.daemonic = on&amp;quot;)
config: com.typesafe.config.Config = Config(SimpleConfigObject({&amp;quot;akka&amp;quot;:{&amp;quot;daemonic&amp;quot;:&amp;quot;on&amp;quot;}}))

scala&amp;gt; implicit val ec = ActorSystem(&amp;quot;default&amp;quot;, config).dispatcher
ec: scala.concurrent.ExecutionContextExecutor = Dispatcher[akka.actor.default-dispatcher]

scala&amp;gt; Future(1)(ec)
res0: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@70f8e6ab

scala&amp;gt; :q

[success] Total time: 101 s, completed 2015/09/15 23:07:48
&amp;gt; // (∩´∀｀)∩ﾜｰｲ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ExecutorService版&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import java.util.concurrent.{Executors, ThreadFactory}
scala&amp;gt; import scala.concurrent.{ExecutionContext, Future}

scala&amp;gt; val factory = new ThreadFactory() {
     |   def newThread(r: Runnable) = {
     |     val t = new Thread(r)
     |     t.setDaemon(true)
     |     t
     |   }
     | }
factory: java.util.concurrent.ThreadFactory = $anon$1@765df09a

scala&amp;gt; implicit val ec = ExecutionContext.fromExecutorService(Executors.newFixedThreadPool(1, factory))
ec: scala.concurrent.ExecutionContextExecutorService = scala.concurrent.impl.ExecutionContextImpl$$anon$1@623404ab

scala&amp;gt; Future(1)(ec)
res0: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@5b37f8e0

scala&amp;gt; :q

[success] Total time: 42 s, completed 2015/09/15 23:41:56
&amp;gt; // (∩´∀｀)∩ﾜｰｲ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scala.concurrent.ExecutionContext.Implicits.global&lt;/code&gt;もdaemonみたい。&lt;br /&gt;
&lt;a href=&#34;https://github.com/scala/scala/blob/v2.11.6/src/library/scala/concurrent/impl/ExecutionContextImpl.scala#L74&#34;&gt;https://github.com/scala/scala/blob/v2.11.6/src/library/scala/concurrent/impl/ExecutionContextImpl.scala#L74&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;そもそもdaemonとnon-daemonどっちがいいんです&#34;&gt;そもそもdaemonとnon-daemonどっちがいいんです？&lt;/h2&gt;

&lt;p&gt;Java力低いので、&lt;code&gt;scala.concurrent.ExecutionContext.Implicits.global&lt;/code&gt;がdaemonだしdaemonでいいじゃん！程度にしか考えてない。&lt;br /&gt;
今回みたいなthread poolで使うケースだと、親のthreadが終了したら残っていても仕方ないのでdaemonで良いかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YAPC::Asia Tokyo 2015 で聴いたセッションのメモや感想</title>
      <link>http://kobtea.net/posts/2015/08/23/yapc/</link>
      <pubDate>Sun, 23 Aug 2015 22:59:36 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2015/08/23/yapc/</guid>
      <description>

&lt;p&gt;最初で最後のYAPC。&lt;br /&gt;
聴いたセッションのメモとか感想とかをぽつぽつと。&lt;/p&gt;

&lt;h2 id=&#34;前夜祭&#34;&gt;前夜祭&lt;/h2&gt;

&lt;h3 id=&#34;php帝国の逆襲-を願うphperが話す最近のphpについてのクイックツアー-php7対応版&#34;&gt;PHP帝国の逆襲！（を願うPHPerが話す最近のPHPについてのクイックツアー PHP7対応版）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Hackとの速度勝負&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Hackが前に流行ったけどPHP7では基本速度は大差無い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;コミニュティが安定しているPHP7を使ったほうが無難&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PHP使う&amp;hellip;?&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;スタートアップなどスピード勝負でガリガリ書きたいときは適している&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;SlackもPHP使ってるしまだまだオワコンじゃないよ！&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;はてなブックマークのトピックページの裏側&#34;&gt;はてなブックマークのトピックページの裏側&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Elasticsearchって重要語句抽出の機能あるのかしゅごい&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;トピックタイトルは短く誤解のないように作成するというのがなかなか定量的に検査しづらそうだなぁ&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;我々にできるossとそのコミュニティの育てかた&#34;&gt;我々にできるOSSとそのコミュニティの育てかた&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;とにかく全部英語&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;コミニュティの母数を大きくするためには公用語の英語を使う&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ロシア語のissueを日本人が読みたくないように、日本語のissueを海外の人は読みたくない&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最低限の機能だけを実装した不完全な状態で公開する&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;issueやpatchを送ってくれる人が出てきて自然とコミュニティが形成される&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;完璧すぎるとissueやpatchがなくて使われてる感が無い&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1日目&#34;&gt;1日目&lt;/h2&gt;

&lt;h3 id=&#34;メリークリスマス&#34;&gt;メリークリスマス！&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;perlの父ラリーさんのありがたいお話&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;肉声で聴きたかったので、翻訳機なしで挑んだらほとんど理解できなかった(´；ω；｀)ﾌﾞﾜｯ&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;そもそもHobitとLoad of the Ring読んだことなかった&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;でもすごい聞き取りやすい発音と速度(ついでに髪サラッサラ)で惚れた&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;基本自分語り？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;perl5をHobit、perl6をLoad of the Ringに対応させて、見た目は違うけど根底にあるものは同じだよという話&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;文脈把握できなかったけど&amp;rdquo;&lt;code&gt;-Ofun&lt;/code&gt; (Optimize fun)&amp;ldquo;と&amp;rdquo;I FAIL GOOD (正しく失敗する)&amp;ldquo;がとても印象的だった&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ラリーさんはLinux Mintを使っていて&lt;code&gt;alias p=&#39;perl&#39;&lt;/code&gt;だった&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;perl6は今年のクリスマスに(なるべく)出すらしい&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;managing-containers-at-scale-with-coreos-and-kubernetes&#34;&gt;Managing Containers at Scale with CoreOS and Kubernetes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;k8sのイントロダクション&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;サービスの無停止デプロイのデモ&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;proxyから少数nodeを抜く&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;抜いたnodeのアプリケーションをupgrade&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;proxyに戻す&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;の繰り返し&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;dashboardのデザインがオサレ&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tbd&#34;&gt;TBD&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;rubyの父matzさんのありがたいお話&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;rubyをdisって一番コミニュティに角が立たないのはわしじゃ&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;rubyの最disりポイントはperlの影響を受けたこと&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2番目はlispの影響を受けたこと&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;言語アーキテクチャは振り子のように移り変わる&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;遠い昔に発表されたものが、時間が経って再評価されたりする&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;GCはかつてプロセスが重くなるからと避けられていたが、JVMが採用し再評価された&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;処理速度重視から、OOPのようなデザイン重視?へ移り、また速度重視になりつつある&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;streemはピタゴラスイッチみたいで楽しいよ&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;perlの上にも三年-ずっとイケてるサービスを作り続ける技術&#34;&gt;Perlの上にも三年 〜 ずっとイケてるサービスを作り続ける技術 〜&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;はてなブログのとても生々しい話&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;かつてはてなブログはModel層, View層, Controller層, コピペ層で形成されていた&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;3回コピペされたコードはDRYの精神に基づきコピペ層へ配置される&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オブジェクト指向入門, DDD本などを輪読してリファクタリング&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;大規模な改修を続けられるって健全な環境だなぁ&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;electron-building-desktop-apps-with-web-technologies&#34;&gt;Electron: Building desktop apps with web technologies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;electronの紹介&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;electronの開発チームは現状1人らしい&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;既存のjsライブラリを使えてとてもエコな印象&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;esa-io-趣味から育てたwebサービスで生きていく&#34;&gt;esa.io - 趣味から育てたWebサービスで生きていく&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;自分で使いたいサービスを作っていたら会社になってた話&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;かわいいは正義&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2日目&#34;&gt;2日目&lt;/h2&gt;

&lt;h3 id=&#34;isuconの勝ち方&#34;&gt;ISUCONの勝ち方&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://kobtea.net/posts/2015/08/22/yapc-isucon/&#34;&gt;別記事書いた&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;実はホットでオープンな-microsoft-azure&#34;&gt;実はホットでオープンな Microsoft Azure&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;azureは1regionあたり16datacenterあってサーバは60万台&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;サーバを詰め込んだコンテナ(物理)でDCを構築している&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;壊れたサーバは使わずに放っておいて、一定数壊れたらコンテナごと破棄する&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mysqlで2億件のシリアルデータと格闘したチューニングの話&#34;&gt;MySQLで2億件のシリアルデータと格闘したチューニングの話&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CPU 2core, memory 8GBでレコード2億件のDBを運用する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;countクエリが1分超え&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;primary keyをランダム値にしていると痛い目に遭う&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;indexの再構築をなめてはいけない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;scale up,outできない環境がただただつらそうだった&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;データ分析基盤を支える技術&#34;&gt;データ分析基盤を支える技術&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;データ分析周りのOSS, XaaSの俯瞰的な紹介&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;データ分析周りで出てくるETLはExtract Transformation Load(抽出, 変換, 登録)の略&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;分析基盤の構築・運用はとてもしんどいのでSaaS使ったほうが楽&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ソーシャルゲームにおける-aws-移行事例&#34;&gt;ソーシャルゲームにおける AWS 移行事例&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2011年頃にラック契約していたオンプレミス環境がEOLを迎えるにあたってAWSへ移行した&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;大体1月2,3人での移行作業&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;RDS&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;たまにネットワーク断が発生するからアプリケーションで要フォロー&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;create tableやindex, 外部キー制約などを除外しておくとdump dataのimportは早くなる&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;perconaのmysqldumpにはそんなオプションがあるらしい&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;timezone変更できないのでtimezone関係の関数を使っている場合は要注意&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;移行時のwrite timeを短縮するためにmulti-azからsingle-azへ一時的に変更&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;session storageとしてyrmcdsを使っている&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;辛いことをやめる-から始まる業務改善とinfrastructure-as-code&#34;&gt;辛いことをやめる！から始まる業務改善とInfrastructure as Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;hb-acnsを導入した時の話&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;nagios, cactiの設定を登録するシステム&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全方位の社員を説得して味方を増やす&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;CTOを味方につけて、個人の思想・プロジェクトではないことをアピールする&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;メリットをとにかく主張する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;トラブルシュートは最優先で行う&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;ユーザは一度でもつまずくと離脱してしまう&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;布教活動をする&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメントを残す&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ハンズオンをして強制的に試す環境を作る&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;効果を定量的に計測しておくと良い&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とても楽しかったですまる&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YAPC::Asia Tokyo 2015 「ISUCONの勝ち方」メモ</title>
      <link>http://kobtea.net/posts/2015/08/22/yapc-isucon/</link>
      <pubDate>Sat, 22 Aug 2015 19:19:11 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2015/08/22/yapc-isucon/</guid>
      <description>

&lt;p&gt;インフラ力が上がると噂の競技ISUCONについて、ISUCON4優勝者自ら必勝法を公開。&lt;br /&gt;
そのうちスライドも公開して頂けるらしいが自分のために。&lt;/p&gt;

&lt;p&gt;リンク&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://isucon.net/&#34;&gt;[公式]ISUCON&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yapcasia.org/2015/talk/show/86ebd212-fab3-11e4-8f5a-8ab37d574c3a&#34;&gt;[公式]トーク情報&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/863801&#34;&gt;togetter&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;スピーカー: @kazeburo さん&lt;/p&gt;

&lt;h2 id=&#34;時間配分&#34;&gt;時間配分&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;競技全体では7時間&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;最初の1時間&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;まだ慌てるような時間じゃない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;課題の理解、プロファイリング・チューニングの方向性を決める&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最後の30分&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;再起動テストだけに使う&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;再起動の失敗はよくある&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;上記を考慮すると、実際の作業時間は5時間ほど&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;chatroom&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;(private) git repository&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;当日作業のリビジョン管理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;見えてもいいならpublic&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;wiki&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;すぐにペッと貼れて使える&lt;code&gt;my.cnf&lt;/code&gt;などの設定ファイルを書いておく&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sysctl&lt;/code&gt;の設定方法などもググらなくて済むように書いておく&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術選択&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;言語は何つかおうとか&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;過去問&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;過去問大事&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://isucon.net/archives/40724693.html&#34;&gt;ISUCON4 予選問題の解説と講評 ＆ AMIの公開&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/tmatsuu/20150815/1439643715&#34;&gt;ISUCON予選突破の鍵は過去問を解くことなので無料で試せるようにした(Vagrant+Ansible)&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;EC2だとお金かかるけど、1日数百円程度なのでYouやっちゃいなよ！みたいな感じ&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;チューニングの進め方&#34;&gt;チューニングの進め方&lt;/h2&gt;

&lt;h3 id=&#34;1-課題の理解&#34;&gt;1. 課題の理解&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;レギュレーションや説明をよく読む&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;スコアの算出方法、失格条件は特に注意&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;実際に動いているアプリケーションを見てみる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;とりあえずベンチ動かす&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;チューニングしていなくてもベンチ取る&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ちゃんと動いているかを確認する&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-プロファイリング&#34;&gt;2. プロファイリング&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ログ解析や負荷確認&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ベンチツールの挙動を把握する&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;アクセス頻度の高い所を優先的にチューニングする&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重いけどスコアに関係ない部分は無視できるかも&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tagomoris/Apache-Log-Parser/blob/master/bin/analyze_apache_logs&#34;&gt;analyze_apache_logs&lt;/a&gt;や&lt;a href=&#34;https://github.com/matsuu/kataribe&#34;&gt;kataribe&lt;/a&gt;を利用する&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mysql slow log解析&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;クエリの実行回数と頻度を見る&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html&#34;&gt;pt-query-digest&lt;/a&gt;を使う&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アプリケーションのプロファイリング&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;straceでシステムコールレベルの解析&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;tcpdumpで通信の解析&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サーバの負荷&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;top, iftop, iotop, dstat, &amp;hellip;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-サーバ構成の把握&#34;&gt;3. サーバ構成の把握&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;どんなミドルウェアがいるのか&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;どのポートが使われているのか&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-チューニングの方向性を決める&#34;&gt;4. チューニングの方向性を決める&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CPUの気持ちになり、コンテキストスイッチを減らす&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;不要な参照・通信・プロセスをとにかく減らす&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;チューニングのヒント&#34;&gt;チューニングのヒント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;重い処理を把握し、減らせないか考える&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;外部プロセス&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;HTML Templateレンダリング&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Text, Image変換処理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;DB, Cacheへの接続&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;B-Treeを意識しながらDBのチューニングをする&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Primary keyとSecondary keyの挙動を把握しておく&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不要なデータのioを最小限にする&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;すぐに捨てるようなデータはなるべく読み込まない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kazeburo/isucon-summerclass2014action2final&#34;&gt;ISUCONで学ぶ Webアプリケーションのパフォーマンス向上のコツ 実践編 完全版&lt;/a&gt;のP49あたりの話&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[Scala] Future#recoverを使って例外処理する</title>
      <link>http://kobtea.net/posts/2015/05/18/scala-future-recover/</link>
      <pubDate>Mon, 18 May 2015 20:56:24 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2015/05/18/scala-future-recover/</guid>
      <description>

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;➜  ~  scala
Welcome to Scala version 2.11.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_11).
Type in expressions to have them evaluated.
Type :help for more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;scala.concurrent.Future&lt;/code&gt;で例外が発生して&lt;code&gt;Failure&lt;/code&gt;になったとき、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルト値を適用して&lt;code&gt;Success&lt;/code&gt;で返したい！&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Failure&lt;/code&gt;のままでいいんだけど別の例外を投げたい！&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことをしたい。&lt;/p&gt;

&lt;h2 id=&#34;recoverを使う&#34;&gt;recoverを使う&lt;/h2&gt;

&lt;p&gt;そんなときのための&lt;code&gt;Future#recover&lt;/code&gt;。&lt;br /&gt;
&lt;code&gt;Throwable&lt;/code&gt;をキャッチして新しい&lt;code&gt;Future&lt;/code&gt;を作ってくれる。&lt;/p&gt;

&lt;p&gt;シグネチャは以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def recover[U &amp;gt;: T](pf: PartialFunction[Throwable, U])(implicit executor: ExecutionContext): Future[U]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/scala/scala/blob/v2.11.6/src/library/scala/concurrent/Future.scala#L310-L326&#34;&gt;この辺&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;下準備&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import scala.concurrent.Future
import scala.concurrent.Future

scala&amp;gt; import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.ExecutionContext.Implicits.global

scala&amp;gt; case class MyException() extends Exception
defined class MyException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// まずはそのまま実行してみる
scala&amp;gt; Future {
     |   throw new IllegalArgumentException()
     | }
res0: scala.concurrent.Future[Nothing] = scala.concurrent.impl.Promise$DefaultPromise@b59d31

scala&amp;gt; res0.value.get
res1: scala.util.Try[Nothing] = Failure(java.lang.IllegalArgumentException)


// デフォルト値を適用したい！
scala&amp;gt; Future {
     |   throw new IllegalArgumentException()
     | } recover {
     |   case e: IllegalArgumentException =&amp;gt; 0
     | }
res2: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@2e1d27ba

scala&amp;gt; res2.value.get
res3: scala.util.Try[Int] = Success(0)


// 別の例外を投げたい！
scala&amp;gt; Future {
     |   throw new IllegalArgumentException()
     | } recover {
     |   case e: IllegalArgumentException =&amp;gt; throw MyException()
     | }
res4: scala.concurrent.Future[Nothing] = scala.concurrent.impl.Promise$DefaultPromise@3bcd05cb

scala&amp;gt; res4.value.get
res5: scala.util.Try[Nothing] = Failure(MyException)


// Successなときはそのままの結果
scala&amp;gt; Future {
     |   10
     | } recover {
     |   case e: IllegalArgumentException =&amp;gt; throw MyException()
     | }
res6: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@56928307

scala&amp;gt; res6.value.get
res7: scala.util.Try[Int] = Success(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;recoverwithを使う&#34;&gt;recoverWithを使う&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Future#recoverWith&lt;/code&gt;なんていうのもある。&lt;br /&gt;
&lt;code&gt;Future#recover&lt;/code&gt;とは部分関数の型が違って、&lt;code&gt;Throwable&lt;/code&gt;を受け取って&lt;code&gt;Future&lt;/code&gt;を返すようになる。&lt;/p&gt;

&lt;p&gt;シグネチャは以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def recoverWith[U &amp;gt;: T](pf: PartialFunction[Throwable, Future[U]])(implicit executor: ExecutionContext): Future[U]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/scala/scala/blob/v2.11.6/src/library/scala/concurrent/Future.scala#L328-L348&#34;&gt;この辺&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;サンプル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// デフォルト値を適用したい！
scala&amp;gt; Future {
     |   throw new IllegalArgumentException()
     | } recoverWith {
     |   case e: IllegalArgumentException =&amp;gt; Future.successful(0)
     | }
res8: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@463b4ac8

scala&amp;gt; res8.value.get
res9: scala.util.Try[Int] = Success(0)


// 別の例外を投げたい！
// これは特に変わらず
scala&amp;gt; Future {
     |   throw new IllegalArgumentException()
     | } recover {
     |   case e: IllegalArgumentException =&amp;gt; throw MyException()
     | }
res10: scala.concurrent.Future[Nothing] = scala.concurrent.impl.Promise$DefaultPromise@4a3e3e8b

scala&amp;gt; res10.value.get
res11: scala.util.Try[Nothing] = Failure(MyException)


// Successなときはそのままの結果
scala&amp;gt; Future {
     |   10
     | } recoverWith {
     |   case e: IllegalArgumentException =&amp;gt; Future.successful(0)
     | }
res12: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@6a1ebcff

scala&amp;gt; res12.value.get
res13: scala.util.Try[Int] = Success(10)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Java Optionの一覧表示</title>
      <link>http://kobtea.net/posts/2015/03/28/java-printflagsfinal/</link>
      <pubDate>Sat, 28 Mar 2015 01:23:54 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2015/03/28/java-printflagsfinal/</guid>
      <description>

&lt;p&gt;JavaのOptionは口コミとかググって知ったオプションを使うとかでイマイチ全体観がつかめない。&lt;br /&gt;
そんなときは&lt;code&gt;-XX:+PrintFlagsFinal&lt;/code&gt;等を使うと幸せになれるかもしれない！&lt;br /&gt;
(しかしこのOptionも先の例に漏れず偶然知った)&lt;/p&gt;

&lt;p&gt;Java Optionを表示するには3つのOptionがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-XX:+PrintFlagsFinal&lt;/code&gt;: 最終的な設定値&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-XX:+PrintFlagsInitial&lt;/code&gt;: 初期値&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-XX:+PrintCommandLineFlags&lt;/code&gt;: コマンドライン上で与えた設定値&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xx-printflagsfinal-option&#34;&gt;&lt;code&gt;-XX:+PrintFlagsFinal&lt;/code&gt; Option&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -XX:+PrintFlagsFinal -version
[Global flags]
    uintx AdaptiveSizeDecrementScaleFactor          = 4               {product}
    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10              {product}
    uintx AdaptiveSizePausePolicy                   = 0               {product}
    uintx AdaptiveSizePolicyCollectionCostMargin    = 50              {product}
    uintx AdaptiveSizePolicyInitializingSteps       = 20              {product}
    uintx AdaptiveSizePolicyOutputInterval          = 0               {product}
    uintx AdaptiveSizePolicyWeight                  = 10              {product}
    uintx AdaptiveSizeThroughPutPolicy              = 0               {product}
    uintx AdaptiveTimeWeight                        = 25              {product}
     bool AdjustConcurrency                         = false           {product}
     bool AggressiveOpts                            = false           {product}
     intx AliasLevel                                = 3               {C2 product}
     bool AlignVector                               = false           {C2 product}
     intx AllocateInstancePrefetchLines             = 1               {product}
     intx AllocatePrefetchDistance                  = 192             {product}
# ...
     bool ZeroTLAB                                  = false           {product}
     intx hashCode                                  = 5               {product}
java version &amp;quot;1.8.0_11&amp;quot;
Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どしゃっとOption一覧とその設定値が表示される。&lt;/p&gt;

&lt;p&gt;どうやら&lt;code&gt;=&lt;/code&gt;は初期値で、&lt;code&gt;:=&lt;/code&gt;は設定された値ぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -XX:+PrintFlagsFinal -version | grep :=
    uintx InitialHeapSize                          := 134217728       {product}
    uintx MaxHeapSize                              := 2147483648      {product}
    uintx MaxNewSize                               := 715653120       {product}
    uintx MinHeapDeltaBytes                        := 524288          {product}
    uintx NewSize                                  := 1572864         {product}
    uintx OldSize                                  := 132644864       {product}
     bool PrintFlagsFinal                          := true            {product}
     bool UseCompressedClassPointers               := true            {lp64_product}
     bool UseCompressedOops                        := true            {lp64_product}
     bool UseParallelGC                            := true            {product}
java version &amp;quot;1.8.0_11&amp;quot;
Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ヒープサイズは明示していないけど、JVMが勝手にマシンのスペックを察して設定してくれている。&lt;/p&gt;

&lt;h2 id=&#34;xx-printflagsinitial-option&#34;&gt;&lt;code&gt;-XX:+PrintFlagsInitial&lt;/code&gt; Option&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -XX:+PrintFlagsInitial
[Global flags]
    uintx AdaptiveSizeDecrementScaleFactor          = 4               {product}
    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10              {product}
    uintx AdaptiveSizePausePolicy                   = 0               {product}
    uintx AdaptiveSizePolicyCollectionCostMargin    = 50              {product}
    uintx AdaptiveSizePolicyInitializingSteps       = 20              {product}
    uintx AdaptiveSizePolicyOutputInterval          = 0               {product}
    uintx AdaptiveSizePolicyWeight                  = 10              {product}
    uintx AdaptiveSizeThroughPutPolicy              = 0               {product}
    uintx AdaptiveTimeWeight                        = 25              {product}
     bool AdjustConcurrency                         = false           {product}
     bool AggressiveOpts                            = false           {product}
     intx AliasLevel                                = 3               {C2 product}
     bool AlignVector                               = true            {C2 product}
     intx AllocateInstancePrefetchLines             = 1               {product}
     intx AllocatePrefetchDistance                  = -1              {product}
# ...
     bool ZeroTLAB                                  = false           {product}
     intx hashCode                                  = 5               {product}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらもどしゃっと表示される。&lt;/p&gt;

&lt;p&gt;せっかくなので&lt;code&gt;~Initial&lt;/code&gt;と&lt;code&gt;~Final&lt;/code&gt;でdiffをとってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -XX:+PrintFlagsInitial &amp;gt;&amp;amp; PrintFlagsInitial
$ java -XX:+PrintFlagsFinal -version &amp;gt;&amp;amp; PrintFlagsFinal
$ diff -U0 PrintFlagsInitial PrintFlagsFinal
--- PrintFlagsInitial	2015-03-28 02:16:40.000000000 +0900
+++ PrintFlagsFinal	2015-03-28 02:17:15.000000000 +0900
@@ -14 +14 @@
-     bool AlignVector                               = true            {C2 product}
+     bool AlignVector                               = false           {C2 product}
@@ -16 +16 @@
-     intx AllocatePrefetchDistance                  = -1              {product}
+     intx AllocatePrefetchDistance                  = 192             {product}
@@ -18,2 +18,2 @@
-     intx AllocatePrefetchLines                     = 3               {product}
-     intx AllocatePrefetchStepSize                  = 16              {product}
+     intx AllocatePrefetchLines                     = 4               {product}
+     intx AllocatePrefetchStepSize                  = 64              {product}
@@ -58 +58 @@
-     bool CICompilerCountPerCPU                     = false           {product}
+     bool CICompilerCountPerCPU                     = true            {product}
@@ -144 +144 @@
-     intx CompilationPolicyChoice                   = 0               {product}
+     intx CompilationPolicyChoice                   = 3               {product}
@@ -251 +251 @@
-    uintx InitialHeapSize                           = 0               {product}
+    uintx InitialHeapSize                          := 134217728       {product}
@@ -257 +257 @@
-     intx InlineSmallCode                           = 1000            {pd product}
+     intx InlineSmallCode                           = 2000            {pd product}
@@ -289 +289 @@
-    uintx MarkSweepDeadRatio                        = 5               {product}
+    uintx MarkSweepDeadRatio                        = 1               {product}
@@ -297 +297 @@
-    uintx MaxHeapSize                               = 130862280       {product}
+    uintx MaxHeapSize                              := 2147483648      {product}
@@ -304,2 +304,2 @@
-     intx MaxLoopPad                                = 15              {C2 product}
-    uintx MaxMetaspaceExpansion                     = 5452592         {product}
+     intx MaxLoopPad                                = 11              {C2 product}
+    uintx MaxMetaspaceExpansion                     = 5451776         {product}
@@ -307,3 +307,3 @@
-    uintx MaxMetaspaceSize                          = 18446744073709551615{product}
-    uintx MaxNewSize                                = 18446744073709551615{product}
-     intx MaxNodeLimit                              = 80000           {C2 product}
+    uintx MaxMetaspaceSize                          = 18446744073709547520{product}
+    uintx MaxNewSize                               := 715653120       {product}
+     intx MaxNodeLimit                              = 75000           {C2 product}
@@ -315,2 +315,2 @@
-     intx MaxVectorSize                             = 32              {C2 product}
-    uintx MetaspaceSize                             = 21810376        {pd product}
+     intx MaxVectorSize                             = 16              {C2 product}
+    uintx MetaspaceSize                             = 21807104        {pd product}
@@ -318 +318 @@
-    uintx MinHeapDeltaBytes                         = 170392          {product}
+    uintx MinHeapDeltaBytes                        := 524288          {product}
@@ -322 +322 @@
-    uintx MinMetaspaceExpansion                     = 340784          {product}
+    uintx MinMetaspaceExpansion                     = 339968          {product}
@@ -344 +344 @@
-    uintx NewSize                                   = 1363144         {product}
+    uintx NewSize                                  := 1572864         {product}
@@ -355 +355 @@
-    uintx OldSize                                   = 5452592         {product}
+    uintx OldSize                                  := 132644864       {product}
@@ -373 +373 @@
-    uintx ParallelGCThreads                         = 0               {product}
+    uintx ParallelGCThreads                         = 4               {product}
@@ -397,3 +397,3 @@
-     intx PrefetchCopyIntervalInBytes               = -1              {product}
-     intx PrefetchFieldsAhead                       = -1              {product}
-     intx PrefetchScanIntervalInBytes               = -1              {product}
+     intx PrefetchCopyIntervalInBytes               = 576             {product}
+     intx PrefetchFieldsAhead                       = 1               {product}
+     intx PrefetchScanIntervalInBytes               = 576             {product}
@@ -415 +415 @@
-     bool PrintFlagsFinal                           = false           {product}
+     bool PrintFlagsFinal                          := true            {product}
@@ -470 +470 @@
-    uintx ReservedCodeCacheSize                     = 50331648        {pd product}
+    uintx ReservedCodeCacheSize                     = 251658240       {pd product}
@@ -572 +572 @@
-    uintx TypeProfileLevel                          = 111             {pd product}
+    uintx TypeProfileLevel                          = 0               {pd product}
@@ -579,3 +579,3 @@
-     bool UseAES                                    = false           {product}
-     bool UseAESIntrinsics                          = false           {product}
-     intx UseAVX                                    = 99              {ARCH product}
+     bool UseAES                                    = true            {product}
+     bool UseAESIntrinsics                          = true            {product}
+     intx UseAVX                                    = 2               {ARCH product}
@@ -590 +590 @@
-     bool UseAddressNop                             = false           {ARCH product}
+     bool UseAddressNop                             = true            {ARCH product}
@@ -597 +597 @@
-     bool UseCLMUL                                  = false           {ARCH product}
+     bool UseCLMUL                                  = true            {ARCH product}
@@ -602 +602 @@
-     bool UseCRC32Intrinsics                        = false           {product}
+     bool UseCRC32Intrinsics                        = true            {product}
@@ -606,2 +606,2 @@
-     bool UseCompressedClassPointers                = false           {lp64_product}
-     bool UseCompressedOops                         = false           {lp64_product}
+     bool UseCompressedClassPointers               := true            {lp64_product}
+     bool UseCompressedOops                        := true            {lp64_product}
@@ -615,2 +615,2 @@
-     bool UseFastAccessorMethods                    = true            {product}
-     bool UseFastEmptyMethods                       = true            {product}
+     bool UseFastAccessorMethods                    = false           {product}
+     bool UseFastEmptyMethods                       = false           {product}
@@ -618 +618 @@
-     bool UseFastStosb                              = false           {ARCH product}
+     bool UseFastStosb                              = true            {ARCH product}
@@ -650,2 +650,2 @@
-     bool UseParallelGC                             = false           {product}
-     bool UseParallelOldGC                          = false           {product}
+     bool UseParallelGC                            := true            {product}
+     bool UseParallelOldGC                          = true            {product}
@@ -653 +653 @@
-     bool UsePopCountInstruction                    = false           {product}
+     bool UsePopCountInstruction                    = true            {product}
@@ -656,2 +656,2 @@
-     intx UseSSE                                    = 99              {product}
-     bool UseSSE42Intrinsics                        = false           {product}
+     intx UseSSE                                    = 4               {product}
+     bool UseSSE42Intrinsics                        = true            {product}
@@ -659 +659 @@
-     bool UseSharedSpaces                           = true            {product}
+     bool UseSharedSpaces                           = false           {product}
@@ -661 +661 @@
-     bool UseStoreImmI16                            = true            {ARCH product}
+     bool UseStoreImmI16                            = false           {ARCH product}
@@ -666 +666 @@
-     bool UseUnalignedLoadStores                    = false           {ARCH product}
+     bool UseUnalignedLoadStores                    = true            {ARCH product}
@@ -668 +668 @@
-     bool UseXMMForArrayCopy                        = false           {product}
+     bool UseXMMForArrayCopy                        = true            {product}
@@ -672 +672 @@
-     bool UseXmmRegToRegMoveAll                     = false           {ARCH product}
+     bool UseXmmRegToRegMoveAll                     = true            {ARCH product}
@@ -686,0 +687,3 @@
+java version &amp;quot;1.8.0_11&amp;quot;
+Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
+Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あれ、&lt;code&gt;:=&lt;/code&gt;以外にも初期値と違うOptionがある&amp;hellip;なんでだろう&amp;hellip;&lt;br /&gt;
あとでしらべる。&lt;/p&gt;

&lt;h2 id=&#34;xx-printcommandlineflags-option&#34;&gt;&lt;code&gt;-XX:+PrintCommandLineFlags&lt;/code&gt; Option&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -XX:+PrintCommandLineFlags -version
-XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC
java version &amp;quot;1.8.0_11&amp;quot;
Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;馴染みのある見た目で表示される。&lt;/p&gt;

&lt;p&gt;ところで、&lt;code&gt;~Initial&lt;/code&gt;だけexit statusが違うのは何故なんだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -XX:+PrintFlagsInitial &amp;gt;&amp;amp; /dev/null; echo $?
0
$ java -XX:+PrintFlagsFinal &amp;gt;&amp;amp; /dev/null; echo $?
1
$ java -XX:+PrintCommandLineFlags &amp;gt;&amp;amp; /dev/null; echo $?
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/2073676/hotspot-jvm-options-displayed---xx--printflagsinitial-and--xx--printflagsfinal.html&#34;&gt;HotSpot JVM Options Displayed: -XX:+PrintFlagsInitial and -XX:+PrintFlagsFinal | JavaWorld&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2012/07/useful-jvm-flags-part-3-printing-all-xx-flags-and-their-values/&#34;&gt;Useful JVM Flags - Part 3 (Printing all XX Flags and their Values) - codecentric Blog&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>WindowsでUS配列&#43;親指IME ON/OFFするための設定</title>
      <link>http://kobtea.net/posts/2014/03/23/setup-us-keyboard-on-win/</link>
      <pubDate>Sun, 23 Mar 2014 00:43:00 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2014/03/23/setup-us-keyboard-on-win/</guid>
      <description>

&lt;p&gt;macでJIS配列からUS配列にジョブチェンジして1年位経ったので、win環境でもUS配列にしたいなーと。&lt;br /&gt;
RealforceのUS配列を購入してwinに設定したこと。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OS: Windows7 64bit&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Keyboard: Realforce 87U&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デスクトップ環境なので今回考えてないけど、ノートの場合は本体の配列がーとか考慮してあげないといけない。&lt;/p&gt;

&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[alt] [無変換] [space] [変換] [alt] みたいな配列にしたい&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;[半角/全角] みたいなトグルは使いたくない&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;macのJIS配列みたいな感じ。&lt;/p&gt;

&lt;h2 id=&#34;作業ログ&#34;&gt;作業ログ&lt;/h2&gt;

&lt;h3 id=&#34;英語キーボードとして認識させる&#34;&gt;英語キーボードとして認識させる&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# レジストリエディタを起動
Start &amp;gt; regedit
# キーボード設定を開く
コンピュータ &amp;gt; HKEY_LOCAL_MACHINE &amp;gt; SYSTEM &amp;gt; CurrentControlSet &amp;gt; services &amp;gt; i8042prt &amp;gt; Parameters

# US配列の設定
LayerDriver JPN             : kbd106.dll    -&amp;gt; kbd101.dll
OverrideKeyboardIdentifier  : PCAT_106KEY   -&amp;gt; PCAT_101KEY
OverrideKeyboardSubtype     : 2             -&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再起動する。&lt;br /&gt;
ログインパスワードを設定している場合、古いJISキーボードでないと弾かれる。&lt;br /&gt;
スキャンコードか何かで識別していたのかなぁ&amp;hellip;&lt;br /&gt;
JIS, US両方あるうちにログインパスワード再設定をしておく。&lt;/p&gt;

&lt;p&gt;参考 : &lt;a href=&#34;http://blog.heiichi.com/?eid=792239&#34;&gt;Windows 7 のキーボードを英語キーボードに変更 - へーいち の うぇぶろぐ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;keyの配置を変える&#34;&gt;Keyの配置を変える&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/library/software/changekey/&#34;&gt;Change Key&lt;/a&gt;を使う。&lt;br /&gt;
winキーとaltキーをスワップさせる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Left  Win  -&amp;gt; Left  Alt
Left  Alt  -&amp;gt; Left  Win
Right Alt  -&amp;gt; Right Win
Right Win  -&amp;gt; Right Alt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;登録して再起動する。&lt;br /&gt;
Winキーを潰して代わりに変換/無変換キーにするよ。&lt;/p&gt;

&lt;h3 id=&#34;変換-無変換キー候補に絶対使わないであろうショートカットを割り当てる&#34;&gt;変換/無変換キー候補に絶対使わないであろうショートカットを割り当てる&lt;/h3&gt;

&lt;p&gt;US配列だと変換/無変換というキーは存在しない。&lt;br /&gt;
ので、絶対使わないであろうショートカットをWinキーに割り当てて、IMEにはそのショートカットに変換/無変換をフックさせる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.autohotkey.com/&#34;&gt;AutoHotkey&lt;/a&gt;を使う。&lt;br /&gt;
AutoHotkeyを起動して&lt;code&gt;Edit This Script&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;; AutoHotkey.ahk

; Right Winに Ctrl + Shift + Rightを割り当てる
RWin::^+Right
; Left  Winに Ctrl + Shift + Left を割り当てる
LWin::^+Left
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;編集したら&lt;code&gt;Reload This Script&lt;/code&gt;。&lt;br /&gt;
Win起動時に一緒に起動して欲しいなら、スタートアップフォルダの中に&lt;code&gt;AutoHotkey.ahk&lt;/code&gt;のショートカットを置いておく。&lt;/p&gt;

&lt;h3 id=&#34;imeに変換-無変換の設定をする&#34;&gt;IMEに変換/無変換の設定をする&lt;/h3&gt;

&lt;p&gt;google IMEを使っているのでその設定方法を。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# キー設定を開く
google IME &amp;gt; プロパティ &amp;gt; 一般 &amp;gt; キー設定 &amp;gt; キー設定の選択 &amp;gt; 編集

# 変換
直接入力, Ctrl Shift Right, IMEを有効化
入力文字なし, Ctrl Shift Right, IMEを有効化
# 無変換
直接入力, Ctrl Shift Left, IMEを無効化
入力文字なし, Ctrl Shift Left, IMEを無効化
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで大勝利。&lt;br /&gt;
なんというまわりくどさ。&lt;/p&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;トグルでもよければAX配列設定で、右Altに半角/全角相当が割り当てられる。&lt;br /&gt;
参考 : &lt;a href=&#34;http://www.atmarkit.co.jp/fwin2k/win2ktips/041axkbd/axkbd.html&#34;&gt;右Altキーに［漢字］キーを割り当てる方法（AXキーボード設定を利用する方法）&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MBAにpyenvを入れる</title>
      <link>http://kobtea.net/posts/2013/11/24/install-pyenv-on-mba/</link>
      <pubDate>Sun, 24 Nov 2013 17:31:00 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2013/11/24/install-pyenv-on-mba/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.8.4
BuildVersion:   12E3067
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rbenvのpython版ないかなーと探してみたらpyenvなんてそのまんまなものがあった。&lt;br /&gt;
&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;Simple Python Version Management: pyenv&lt;/a&gt;を参考に。&lt;/p&gt;

&lt;p&gt;Macでhomebrew使っているなら、brewで入れるのがらくちん。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# brewを最新の状態にする
$ brew update
$ brew upgrade

$ brew search pyenv
pyenv		   pyenv-virtualenv
$ brew install pyenv
Warning: Your Xcode (4.6.3) is outdated
Please update to Xcode 5.0.1.
Xcode can be updated from the App Store.
==&amp;gt; Downloading https://github.com/yyuu/pyenv/archive/v0.4.0-20131116.tar.gz
######################################################################## 100.0%
==&amp;gt; Caveats
To enable shims and autocompletion add to your profile:
  if which pyenv &amp;gt; /dev/null; then eval &amp;quot;$(pyenv init -)&amp;quot;; fi

To use Homebrew&#39;s directories rather than ~/.pyenv add to your profile:
  export PYENV_ROOT=/usr/local/opt/pyenv
==&amp;gt; Summary
🍺  /usr/local/Cellar/pyenv/20131116: 199 files, 2.2M, built in 5 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.profile&lt;/code&gt;とかに以下を追記する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if which pyenv &amp;gt; /dev/null; then eval &amp;quot;$(pyenv init -)&amp;quot;; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;profileを再読み込み。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ source ~/.zprofile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使えるか試してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pyenv versions
* system (set by /Users/kobtea/.pyenv/version)
$ pyenv global
system
$ python --version
Python 2.7.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;試しに3.3.2を入れてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pyenv install 3.3.2
Downloading Python-3.3.2.tgz...
-&amp;gt; http://yyuu.github.io/pythons/0a2ea57f6184baf45b150aee53c0c8da
Installing Python-3.3.2...
Installed Python-3.3.2 to /Users/kobtea/.pyenv/versions/3.3.2

Downloading setuptools-1.3.2.tar.gz...
-&amp;gt; https://pypi.python.org/packages/source/s/setuptools/setuptools-1.3.2.tar.gz
Installing setuptools-1.3.2...
Installed setuptools-1.3.2 to /Users/kobtea/.pyenv/versions/3.3.2

Downloading pip-1.4.1.tar.gz...
-&amp;gt; https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz
Installing pip-1.4.1...
Installed pip-1.4.1 to /Users/kobtea/.pyenv/versions/3.3.2


$ pyenv rehash
$ pyenv versions
* system (set by /Users/kobtea/.pyenv/version)
  3.3.2
$ pyenv global 3.3.2
$ pyenv version
3.3.2 (set by /Users/kobtea/.pyenv/version)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip --version
pip 1.4.1 from /Users/kobtea/.pyenv/versions/3.3.2/lib/python3.3/site-packages/pip-1.4.1-py3.3.egg (python 3.3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すごいpipがもう使えるようになってる！！ステキ！！&lt;br /&gt;
ついでにipythonを入れてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install ipython
Downloading/unpacking ipython
  Downloading ipython-1.1.0.tar.gz (8.7MB): 8.7MB downloaded
  Running setup.py egg_info for package ipython
...

$ pip list
ipython (1.1.0)
pip (1.4.1)
setuptools (1.3.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;らくちん。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Pagesにカスタムドメインを割り当てる</title>
      <link>http://kobtea.net/posts/2013/09/23/set-custom-domain-at-github-pages/</link>
      <pubDate>Mon, 23 Sep 2013 21:39:00 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2013/09/23/set-custom-domain-at-github-pages/</guid>
      <description>

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&#34;&gt;Setting up a custom domain with Pages - Github Pages&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://octopress.org/docs/deploying/github/#custom_domains&#34;&gt;Custom Domains - Octopress&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リポジトリのトップディレクトリにCNAMEファイルを作成して、そこに定義するだけで良いみたい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: After creating the file, it can take up to 10 minutes for the content to become available. Once the Page content is available, you can continue to make the DNS changes in the next step. If the Page doesn&amp;rsquo;t build successfully, you&amp;rsquo;ll receive a notification from GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&#34;&gt;Setting up a custom domain with Pages - Github Pages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;反映されるのに10分くらい待ってね、とのこと。&lt;br /&gt;
反映されたらメールをくれるらしい。&lt;/p&gt;

&lt;h2 id=&#34;octopress側の設定&#34;&gt;Octopress側の設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;source/CNAME&lt;/code&gt;に割り当てるドメインを設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;blog.kobtea.net&#39; &amp;gt;&amp;gt; source/CNAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;のurlも変更しておく。&lt;/p&gt;

&lt;p&gt;source: &lt;code&gt;_config.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# ----------------------- #
#      Main Configs       #
# ----------------------- #

url: http://blog.kobtea.net
title: blog.kobtea.net
subtitle: 咳をしても情弱
author: kobtea
simple_search: http://google.com/search
description:
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dns設定&#34;&gt;DNS設定&lt;/h2&gt;

&lt;p&gt;お名前.comを使っているので、そちらで設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ドメイン設定 -&amp;gt; ネームサーバの設定 -&amp;gt; DNS関連機能の設定 -&amp;gt; DNSレコード設定を利用する
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2013/09/23/dns-setting-onamae.png&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;で適用。&lt;br /&gt;
適用されたよメールが届くまでのんびり待つ。&lt;/p&gt;

&lt;h2 id=&#34;確認&#34;&gt;確認&lt;/h2&gt;

&lt;p&gt;digしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dig +noall +answer blog.kobtea.net CNAME
blog.kobtea.net.    3600    IN  CNAME   kobtea.github.io.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できてるぽい。&lt;br /&gt;
最後にblog.kobtea.netでgithub pagesが見れたら喜んでおしまい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Octopressのテーマを変更する</title>
      <link>http://kobtea.net/posts/2013/09/23/change-octopress-theme/</link>
      <pubDate>Mon, 23 Sep 2013 14:56:00 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2013/09/23/change-octopress-theme/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes&#34;&gt;3rd Party Octopress Themes&lt;/a&gt;で公開されているので気に入ったものを選ぶ。&lt;br /&gt;
&lt;a href=&#34;https://github.com/macjasp/cleanpress&#34;&gt;CleanPress&lt;/a&gt;がステキ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# テーマのディレクトリまで行ってテーマのリポジトリをclone
$ cd octopress/.theme
$ git clone git@github.com:macjasp/cleanpress.git
Cloning into &#39;cleanpress&#39;...
remote: Counting objects: 273, done.
remote: Compressing objects: 100% (248/248), done.
remote: Total 273 (delta 30), reused 229 (delta 16)
Receiving objects: 100% (273/273), 1.09 MiB | 554 KiB/s, done.
Resolving deltas: 100% (30/30), done.

# テーマを適用する
$ rake install\[cleanpress\]
(in /Users/kobtea/Programs/octopress)
A theme is already installed, proceeding will overwrite existing files. Are you sure? [y/n] y
## Copying cleanpress theme into ./source and ./sass
mkdir -p source
cp -r .themes/cleanpress/source/. source
mkdir -p sass
cp -r .themes/cleanpress/sass/. sass
mkdir -p source/_posts
mkdir -p public

# generate!
$ rake generate
(in /Users/kobtea/Programs/octopress)
## Generating Site with Jekyll
unchanged sass/screen.scss
Configuration from /Users/kobtea/Programs/octopress/_config.yml
Building site: source -&amp;gt; public
Successfully generated site: source -&amp;gt; public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rake preview&lt;/code&gt;してちゃんと反映されているかを確認する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2013/09/23/install-cleanpress.png&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;おおん、ページ作っていないAboutとかPortfolioがおる&amp;hellip;&lt;/p&gt;

&lt;p&gt;どのへんで定義されているか探してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find . -type f | xargs grep Portfolio
./.themes/cleanpress/source/_includes/custom/navigation.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/404.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/404.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/archives/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/archives/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/atom.xml:&amp;lt;p&amp;gt;おおん、ページ作っていないAboutとかPortfolioがおる&amp;amp;hellip;&amp;lt;br/&amp;gt;
./public/blog/2013/06/15/tywin-lannister-quote/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/06/15/tywin-lannister-quote/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/22/hello-octopress/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/22/hello-octopress/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/22/use-markdown-on-vim/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/22/use-markdown-on-vim/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/22/use-multibytes-on-ruby/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/22/use-multibytes-on-ruby/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/23/change-octopress-theme/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/23/change-octopress-theme/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/23/change-octopress-theme/index.html:&amp;lt;p&amp;gt;おおん、ページ作っていないAboutとかPortfolioがおる&amp;amp;hellip;&amp;lt;br/&amp;gt;
./public/blog/2013/09/23/install-ruby-on-mba/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/23/install-ruby-on-mba/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/23/setup-octopress/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/2013/09/23/setup-octopress/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/archives/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/archives/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/etc/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/etc/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/markdown/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/markdown/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/octopress/atom.xml:&amp;lt;p&amp;gt;おおん、ページ作っていないAboutとかPortfolioがおる&amp;amp;hellip;&amp;lt;br/&amp;gt;
./public/blog/categories/octopress/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/octopress/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/ruby/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/ruby/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/vim/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/categories/vim/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/blog/index.html:&amp;lt;p&amp;gt;おおん、ページ作っていないAboutとかPortfolioがおる&amp;amp;hellip;&amp;lt;br/&amp;gt;
./public/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/index.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
./public/index.html:&amp;lt;p&amp;gt;おおん、ページ作っていないAboutとかPortfolioがおる&amp;amp;hellip;&amp;lt;br/&amp;gt;
./source/_includes/custom/navigation.html:	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
Binary file ./source/_posts/.2013-09-23-change-octopress-theme.markdown.swp matches
./source/_posts/2013-09-23-change-octopress-theme.markdown:おおん、ページ作っていないAboutとかPortfolioがおる...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;octopress/.themes/cleanpress/source/_includes/custom/navigation.html&lt;/code&gt;あたりがくさい。&lt;br /&gt;
ブランチ切って編集する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd .themes/cleanpress
$ git branch
* master
$ git checkout -b edit-contents-links
Switched to a new branch &#39;edit-contents-links&#39;
$ git branch
* edit-contents-links
  master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ひとまずコメントアウトしておく。&lt;/p&gt;

&lt;p&gt;source: &lt;code&gt;octopress/.themes/cleanpress/source/_includes/custom/navigation.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;!--li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/about&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li--&amp;gt;
	&amp;lt;!--li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li--&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/archives&amp;quot;&amp;gt;Archive&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度テーマをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rake install\[cleanpress\]
(in /Users/kobtea/Programs/octopress)
A theme is already installed, proceeding will overwrite existing files. Are you sure? [y/n] y
## Copying cleanpress theme into ./source and ./sass
mkdir -p source
cp -r .themes/cleanpress/source/. source
mkdir -p sass
cp -r .themes/cleanpress/sass/. sass
mkdir -p source/_posts
mkdir -p public

$ rake generate
(in /Users/kobtea/Programs/octopress)
## Generating Site with Jekyll
unchanged sass/screen.scss
Configuration from /Users/kobtea/Programs/octopress/_config.yml
Building site: source -&amp;gt; public
Successfully generated site: source -&amp;gt; public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://kobtea.net/img/2013/09/23/install-cleanpress2.png&#34; class=&#34;img-responsive&#34;/&gt;&lt;/p&gt;

&lt;p&gt;ちゃんと消えているね。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>