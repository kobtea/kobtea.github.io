<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opengrok on kobtea.net</title>
    <link>http://kobtea.net/tags/opengrok/index.xml</link>
    <description>Recent content in Opengrok on kobtea.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>2015 kobtea</copyright>
    <atom:link href="http://kobtea.net/tags/opengrok/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OpenGrokのデザインを変更する</title>
      <link>http://kobtea.net/posts/2016/05/14/customize-skin-for-opengrok/</link>
      <pubDate>Sat, 14 May 2016 04:21:57 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2016/05/14/customize-skin-for-opengrok/</guid>
      <description>

&lt;p&gt;以前&lt;a href=&#34;http://kobtea.net/posts/2016/05/03/setup-opengrok/&#34;&gt;Ubuntu trustyにOpenGrokをインストールする&lt;/a&gt;で、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;サイトのデザインを変えたい場合はどうすればいいんだろう…folkして魔改造するのかな…それはつらそうだな…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書いたけど、方法がわかったのでメモ。&lt;br /&gt;
標準でいくつかのデザインテーマが提供されていた。&lt;/p&gt;

&lt;h2 id=&#34;web-site-look-feel-option&#34;&gt;Web Site Look &amp;amp; Feel Option&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;OpenGrok&lt;/code&gt; wrapper scriptを眺めていたら&lt;code&gt;SKIN&lt;/code&gt;なんて環境変数を見つけた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/blob/0.12.1.5/OpenGrok#L278-L281&#34;&gt;https://github.com/OpenGrok/OpenGrok/blob/0.12.1.5/OpenGrok#L278-L281&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;標準で&lt;code&gt;default&lt;/code&gt;, &lt;code&gt;offwhite&lt;/code&gt;, &lt;code&gt;polished&lt;/code&gt;の3種類のスキンが提供されている。&lt;br /&gt;
「ちょっとだけ気分を変えたいな」程度であれば、このスキンを使えば幸せになれそう。&lt;/p&gt;

&lt;h2 id=&#34;スキン&#34;&gt;スキン&lt;/h2&gt;

&lt;p&gt;どれもJavaを感じるデザイン。&lt;/p&gt;

&lt;h3 id=&#34;default&#34;&gt;default&lt;/h3&gt;

&lt;p&gt;


&lt;img src=&#34;http://kobtea.net/img/2016/05/14/default01.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;br /&gt;



&lt;img src=&#34;http://kobtea.net/img/2016/05/14/default02.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;/p&gt;

&lt;h3 id=&#34;offwhite&#34;&gt;offwhite&lt;/h3&gt;

&lt;p&gt;


&lt;img src=&#34;http://kobtea.net/img/2016/05/14/offwhite01.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;br /&gt;



&lt;img src=&#34;http://kobtea.net/img/2016/05/14/offwhite02.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;/p&gt;

&lt;h3 id=&#34;polished&#34;&gt;polished&lt;/h3&gt;

&lt;p&gt;


&lt;img src=&#34;http://kobtea.net/img/2016/05/14/polished01.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;br /&gt;



&lt;img src=&#34;http://kobtea.net/img/2016/05/14/polished02.png&#34; class=&#34;img-responsive img-thumbnail&#34;/&gt;

&lt;/p&gt;

&lt;h2 id=&#34;変更方法&#34;&gt;変更方法&lt;/h2&gt;

&lt;p&gt;スキンを変更するには、&lt;code&gt;update&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;する際に&lt;code&gt;SKIN&lt;/code&gt;を指定しておけばいいだけ。&lt;/p&gt;

&lt;p&gt;tomcatに既にdeployしている場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo SKIN=&#39;-L offwhite&#39; ./opengrok-0.12.1.5/bin/OpenGrok update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tomcatにこれからdeployする場合、&lt;code&gt;deploy&lt;/code&gt;ではスキン設定されないので&lt;code&gt;update&lt;/code&gt;もすること。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo ./opengrok-0.12.1.5/bin/OpenGrok deploy
$ sudo SKIN=&#39;-L offwhite&#39; ./opengrok-0.12.1.5/bin/OpenGrok update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトを追加してindexを張るときにも&lt;code&gt;SKIN&lt;/code&gt;の指定は必要。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo SKIN=&#39;-L offwhite&#39; ./opengrok-0.12.1.5/bin/OpenGrok index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;毎回環境変数指定するの面倒くさいので、&lt;code&gt;OpenGrok&lt;/code&gt; wrapper scriptを直にいじっちゃってもいいかも。&lt;br /&gt;
あるいは環境変数書き込んだrcファイル作って、&lt;code&gt;source&lt;/code&gt;するとか。&lt;/p&gt;

&lt;p&gt;スキンを変えても反映されない場合は、ブラウザキャッシュを消すこと。&lt;/p&gt;

&lt;h2 id=&#34;フルカスタマイズする場合&#34;&gt;フルカスタマイズする場合&lt;/h2&gt;

&lt;p&gt;標準のスキンを参考に自作すればいいんじゃないかな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/tree/0.12.1.5/web/default&#34;&gt;default&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/tree/0.12.1.5/web/offwhite&#34;&gt;offwhite&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/tree/0.12.1.5/web/polished&#34;&gt;polished&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自作スキンを作って&lt;code&gt;.war&lt;/code&gt;に追加した後、&lt;code&gt;SKIN&lt;/code&gt;で指定すればいいだけなはず(実際作ってないけど&amp;hellip;)。&lt;br /&gt;
Java力低いので&lt;code&gt;jar&lt;/code&gt;コマンドを使ってファイルを抽出・追加する方法についてメモメモ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 任意のディレクトリ・ファイルを抽出する
$ jar xf source.war offwhite
$ ls -l offwhite/
total 44
drwxrwxr-x 2 vagrant vagrant  4096 Apr 29  2014 img
-rw-rw-r-- 1 vagrant vagrant   803 Apr 29  2014 jquery.autocomplete.css
-rw-rw-r-- 1 vagrant vagrant  1135 Apr 29  2014 jquery.combo.css
-rw-rw-r-- 1 vagrant vagrant   192 Apr 29  2014 jquery.tooltip.css
-rw-rw-r-- 1 vagrant vagrant  9534 Apr 29  2014 print.css
-rw-rw-r-- 1 vagrant vagrant 13976 Mar 24  2015 style.css

# 試しにファイルを仕込んでwar更新してみる
$ touch offwhite/hogehoge
$ jar uf source.war offwhite

# お掃除した後に、warを展開する
$ rm -rf offwhite
$ jar xf source.war

# ちゃんと追加されているんだなも
$ ls offwhite/hogehoge
offwhite/hogehoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分でスキンを作った場合にはこの要領で。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jar uf opengrok-0.12.1.5/lib/source.war myskin
$ sudo SKIN=&#39;-L myskin&#39; ./opengrok-0.12.1.5/bin/OpenGrok update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/blob/0.12.1.5/README.txt#L357-L404&#34;&gt;README&lt;/a&gt;には、&lt;code&gt;jar&lt;/code&gt;ではなく&lt;code&gt;unzip&lt;/code&gt;を使った方法が紹介されている。&lt;br /&gt;
お好きな方で。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu trustyにOpenGrokをインストールする</title>
      <link>http://kobtea.net/posts/2016/05/03/setup-opengrok/</link>
      <pubDate>Tue, 03 May 2016 03:16:25 +0900</pubDate>
      
      <guid>http://kobtea.net/posts/2016/05/03/setup-opengrok/</guid>
      <description>

&lt;p&gt;tomcat力低いけどOpenGrok使ってみたいんや！&lt;br /&gt;
お試しにvagrantで立ててみる。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/wiki/How-to-install-OpenGrok&#34;&gt;How to install OpenGrok&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenGrok/OpenGrok/wiki/Supported-Languages-and-Formats&#34;&gt;Supported Languages and Formats&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04.4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;OpenJDK 1.7.0_95&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;OpenGrok 0.12.1.5&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;必要なpackageをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y
~$ sudo apt-get install openjdk-7-jdk tomcat7 exuberant-ctags git subversion mercurial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OpenGrokのarchiveを落としてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ wget -O - https://java.net/projects/opengrok/downloads/download/opengrok-0.12.1.5.tar.gz | tar xvzf -
~$ ./opengrok-0.12.1.5/bin/OpenGrok --help
Loading the default instance configuration ...

Usage: OpenGrok &amp;lt;deploy|derby|update|updateQuietly|usage|help&amp;gt;
       OpenGrok index [&amp;lt;directory&amp;gt;]
       OpenGrok indexpart &amp;lt;src_root&amp;gt; &amp;lt;directory1&amp;gt; [..]
       OpenGrok clearHistory [&amp;lt;repository_name&amp;gt;]

  Optional environment variables:
    OPENGROK_CONFIGURATION - location of your configuration
      e.g. $ OPENGROK_CONFIGURATION=/var/opengrok/myog.conf ./opengrok-0.12.1.5/bin/OpenGrok ...

    See the code for more information on configuration options / variables
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;See the code for more information on configuration options / variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh&amp;hellip;軟弱者にとても厳しい。&lt;br /&gt;
と思ったけど、&lt;code&gt;bin/OpenGrok&lt;/code&gt;自体はただのshell scriptなので頑張れば大丈夫そう。&lt;/p&gt;

&lt;p&gt;tomcatにデプロイするぞ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ sudo service tomcat7 status
 * Tomcat servlet engine is running with pid 10477
~$ sudo ./opengrok-0.12.1.5/bin/OpenGrok deploy
Loading the default instance configuration ...
Installing /home/vagrant/opengrok-0.12.1.5/bin/../lib/source.war to /var/lib/tomcat7/webapps ...

Start your application server (Tomcat),  if it is not already
running, or wait until it loads the just installed web  application.

OpenGrok should be available on &amp;lt;HOST&amp;gt;:&amp;lt;PORT&amp;gt;/source
  where HOST and PORT are configured in Tomcat.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;HOST&amp;gt;:8080/source/&lt;/code&gt;にアクセスしてOpenGrokが表示されたら喜ぶ。&lt;/p&gt;

&lt;h2 id=&#34;リファレンス用のコードを配置&#34;&gt;リファレンス用のコードを配置&lt;/h2&gt;

&lt;p&gt;リファレンス用のコードとは、リポジトリやプロジェクトと同義。&lt;br /&gt;
OpenGrokではプロジェクトという単語を使っている。&lt;/p&gt;

&lt;p&gt;このときに最低限知っておいたほうがいい環境変数。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OPENGROK_INSTANCE_BASE&lt;/code&gt;:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;default &lt;code&gt;/var/opengrok&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;OpenGrokのベースディレクトリ&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;この配下にetc, log等色々掘られる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SRC_ROOT&lt;/code&gt;:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;default &lt;code&gt;OPENGROK_INSTANCE_BASE/src&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;リファレンス用コードを置くディレクトリ&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DATA_ROOT&lt;/code&gt;:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;default &lt;code&gt;OPENGROK_INSTANCE_BASE/data&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;リファレンス用コードの解析結果が置かれるディレクトリ&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;適当に&lt;a href=&#34;https://github.com/kobtea/akka-goat-mail&#34;&gt;kobtea/akka-goat-mail&lt;/a&gt;とかでいいや&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SRC_ROOTは$HOME/srcにしてみよう
~$ mkdir src
~$ cd src/
~/src$ git clone https://github.com/kobtea/akka-goat-mail.git
~/src$ cd

# indexを張る
# デフォルト以外のSRC_ROOTの場合は絶対パスを与える
~$ sudo ./opengrok-0.12.1.5/bin/OpenGrok index $HOME/src
Loading the default instance configuration ...
WARNING: OpenGrok generated data path /var/opengrok/data doesn&#39;t exist
  Attempting to create generated data directory ...
WARNING: OpenGrok generated etc path /var/opengrok/etc  doesn&#39;t exist
  Attempting to create generated etc directory ...
  Creating default /var/opengrok/logging.properties ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザでプロジェクトが追加されたことを確認する。&lt;/p&gt;

&lt;p&gt;ここでちょっと寄り道。&lt;br /&gt;
indexを張ったあとの&lt;code&gt;OPENGROK_INSTANCE_BASE&lt;/code&gt;を眺めてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~$ tree /var/opengrok/
/var/opengrok/
├── data
│   ├── historycache
│   │   └── akka-goat-mail
│   │       ├── build.sbt.gz
│   │       ├── LICENSE.gz
│   │       ├── OpenGroklatestRev
│   │       ├── project
│   │       │   ├── build.properties.gz
│   │       │   └── plugins.sbt.gz
│   │       ├── README.md.gz
│   │       └── src
│   │           └── main
│   │               └── scala
│   │                   └── GoatMail.scala.gz
│   ├── index
│   │   └── akka-goat-mail
│   │       ├── _1.fdt
│   │       ├── _1.fdx
│   │       ├── _1.fnm
│   │       ├── _1_Lucene41_0.doc
│   │       ├── _1_Lucene41_0.pos
│   │       ├── _1_Lucene41_0.tim
│   │       ├── _1_Lucene41_0.tip
│   │       ├── _1.nvd
│   │       ├── _1.nvm
│   │       ├── _1.si
│   │       ├── segments_3
│   │       └── segments.gen
│   ├── timestamp
│   └── xref
│       └── akka-goat-mail
│           ├── build.sbt.gz
│           ├── LICENSE.gz
│           ├── project
│           │   ├── build.properties.gz
│           │   └── plugins.sbt.gz
│           ├── README.md.gz
│           └── src
│               └── main
│                   └── scala
│                       └── GoatMail.scala.gz
├── etc
│   └── configuration.xml
├── log
│   └── opengrok0.0.log
└── logging.properties

17 directories, 29 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logもここにあるのね。&lt;br /&gt;
loggerを変更する場合は、&lt;code&gt;opengrok-0.12.1.5/doc/logging.properties&lt;/code&gt;を参考にして&lt;code&gt;OPENGROK_LOGGER_CONFIG_PATH&lt;/code&gt;に渡せば良い。&lt;/p&gt;

&lt;p&gt;etcにはコマンドパスなどのマッピング情報が記載されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;void method=&amp;quot;put&amp;quot;&amp;gt;
 &amp;lt;string&amp;gt;org.opensolaris.opengrok.history.GitRepository&amp;lt;/string&amp;gt;
 &amp;lt;string&amp;gt;/usr/bin/git&amp;lt;/string&amp;gt;
&amp;lt;/void&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。&lt;br /&gt;
indexコマンドで生成しているわけだし、これは手でいじらないほうが良さそう。&lt;/p&gt;

&lt;h2 id=&#34;運用&#34;&gt;運用&lt;/h2&gt;

&lt;p&gt;基本的な運用自体は、読みたいソースを見つけて&lt;code&gt;SRC_ROOT&lt;/code&gt;へ逐一追加、indexの貼り直しかな。&lt;br /&gt;
常にupstreamを追い続けたいのであれば、リポジトリ更新、index貼り直しをするcronでも作れば良い。&lt;br /&gt;
サイトのデザインを変えたい場合はどうすればいいんだろう&amp;hellip;folkして魔改造するのかな&amp;hellip;それはつらそうだな&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>